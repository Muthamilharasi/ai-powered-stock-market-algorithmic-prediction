{"file_contents":{"app.py":{"content":"import os\nimport re\nimport time\nimport json\nimport random\nimport logging\nimport threading\nimport datetime\nimport secrets\nimport numpy as np\nimport pandas as pd\nimport yfinance as yf\nimport plotly.graph_objs as go\n\nfrom flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify\nfrom flask_bcrypt import Bcrypt\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nfrom dotenv import load_dotenv\nfrom telegram import Bot\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom datetime import datetime, timedelta\nimport smtplib\ntry:\n    from email.mime.text import MimeText\n    from email.mime.multipart import MimeMultipart\nexcept ImportError:\n    # Fallback for systems without email mime support\n    MimeText = None\n    MimeMultipart = None\n\n# Local imports\nfrom models import User, Portfolio, Trade, Position, Alert, db, Transaction, UserSettings, PasswordResetToken\nfrom news import analyze_news\nfrom prediction import StockPredictor\nfrom paper_trading import PaperTradingEngine\nfrom stock_simulator import StockSimulator\nfrom telegram_bot import TelegramBotHandler\n\n# ------------------ CONFIG ------------------\nload_dotenv()\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# Database\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\"pool_recycle\": 300, \"pool_pre_ping\": True}\ndb.init_app(app)\n\n# Extensions\nbcrypt = Bcrypt(app)\nsocketio = SocketIO(app, cors_allowed_origins=\"*\", async_mode='threading')\n\n# Trading engines\ntrading_engine = PaperTradingEngine(db)\nstock_simulator = StockSimulator()\npredictor = StockPredictor()\ntelegram_handler = TelegramBotHandler()\n\n# ------------------ HELPERS ------------------\ndef send_email(to_email, subject, body):\n    \"\"\"Send email for password reset\"\"\"\n    try:\n        smtp_server = os.getenv(\"SMTP_SERVER\", \"smtp.gmail.com\")\n        smtp_port = int(os.getenv(\"SMTP_PORT\", \"587\"))\n        smtp_username = os.getenv(\"SMTP_USERNAME\")\n        smtp_password = os.getenv(\"SMTP_PASSWORD\")\n        \n        if not smtp_username or not smtp_password:\n            logging.warning(\"Email credentials not configured\")\n            return False\n            \n        msg = MimeMultipart()\n        msg['From'] = smtp_username\n        msg['To'] = to_email\n        msg['Subject'] = subject\n        msg.attach(MimeText(body, 'html'))\n        \n        server = smtplib.SMTP(smtp_server, smtp_port)\n        server.starttls()\n        server.login(smtp_username, smtp_password)\n        server.send_message(msg)\n        server.quit()\n        return True\n    except Exception as e:\n        logging.error(f\"Email sending failed: {e}\")\n        return False\n\ndef calculate_rsi(prices, window=14):\n    delta = prices.diff()\n    gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()\n    loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()\n    rs = gain / loss\n    rsi = 100 - (100 / (1 + rs))\n    return rsi\n\ndef check_alerts():\n    alerts = Alert.query.filter_by(status=\"Active\").all()\n    for alert in alerts:\n        try:\n            match = re.match(r\"Price\\s*([<>]=?|==)\\s*(\\d+\\.?\\d*)\", alert.condition)\n            if not match:\n                continue\n            operator, value = match.groups()\n            value = float(value)\n\n            data = yf.Ticker(alert.symbol).history(period=\"1d\")\n            if data.empty:\n                continue\n            current_price = float(data['Close'].iloc[-1])\n\n            if eval(f\"{current_price} {operator} {value}\"):\n                user = User.query.get(alert.user_id)\n                if user and user.alerts_enabled:\n                    telegram_handler.send_alert(\n                        user.telegram_chat_id, \n                        f\"Alert Triggered: {alert.symbol} {alert.condition} (Current: ${current_price:.2f})\"\n                    )\n                alert.status = \"Triggered\"\n                db.session.commit()\n        except Exception as e:\n            logging.error(f\"Error checking alert: {e}\")\n\ndef is_valid_password(password):\n    \"\"\"Check password strength\"\"\"\n    if len(password) < 8:\n        return False, \"Password must be at least 8 characters long\"\n    if not re.search(r\"[A-Z]\", password):\n        return False, \"Password must contain at least one uppercase letter\"\n    if not re.search(r\"[a-z]\", password):\n        return False, \"Password must contain at least one lowercase letter\"\n    if not re.search(r\"\\d\", password):\n        return False, \"Password must contain at least one number\"\n    return True, \"Password is valid\"\n\ndef is_valid_email(email):\n    \"\"\"Validate email format\"\"\"\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is not None\n\ndef requires_auth(f):\n    \"\"\"Decorator to require authentication\"\"\"\n    def decorated_function(*args, **kwargs):\n        if 'user_id' not in session:\n            return redirect(url_for('login'))\n        return f(*args, **kwargs)\n    decorated_function.__name__ = f.__name__\n    return decorated_function\n\n# ------------------ AUTH ROUTES ------------------\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        remember = request.form.get('remember_me', False)\n        \n        user = User.query.filter_by(username=username).first()\n        if user and check_password_hash(user.password, password):\n            session['user_id'] = user.id\n            session['username'] = user.username\n            \n            # Set longer session if remember me is checked\n            if remember:\n                session.permanent = True\n                app.permanent_session_lifetime = timedelta(days=30)\n            \n            # Update last login\n            user.last_login = datetime.utcnow()\n            db.session.commit()\n            \n            flash(\"Welcome back!\", \"success\")\n            next_page = request.args.get('next')\n            return redirect(next_page) if next_page else redirect(url_for('dashboard'))\n        flash(\"Invalid credentials.\", \"danger\")\n    return render_template('login.html')\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if request.method == 'POST':\n        username = request.form['username']\n        email = request.form['email']\n        password = request.form['password']\n        confirm_password = request.form['confirm_password']\n        \n        # Validation\n        if User.query.filter_by(username=username).first():\n            flash(\"Username already exists.\", \"danger\")\n            return render_template('register.html')\n            \n        if User.query.filter_by(email=email).first():\n            flash(\"Email already registered.\", \"danger\")\n            return render_template('register.html')\n            \n        if not is_valid_email(email):\n            flash(\"Please enter a valid email address.\", \"danger\")\n            return render_template('register.html')\n            \n        if password != confirm_password:\n            flash(\"Passwords do not match.\", \"danger\")\n            return render_template('register.html')\n            \n        is_valid, message = is_valid_password(password)\n        if not is_valid:\n            flash(message, \"danger\")\n            return render_template('register.html')\n        \n        # Create user\n        user = User(\n            username=username,\n            email=email,\n            password=generate_password_hash(password)\n        )\n        db.session.add(user)\n        db.session.commit()\n        \n        # Create default settings\n        settings = UserSettings(user_id=user.id)\n        db.session.add(settings)\n        db.session.commit()\n        \n        flash(\"Registration successful. Please log in.\", \"success\")\n        return redirect(url_for('login'))\n    return render_template('register.html')\n\n@app.route('/forgot-password', methods=['GET', 'POST'])\ndef forgot_password():\n    if request.method == 'POST':\n        email = request.form['email']\n        user = User.query.filter_by(email=email).first()\n        \n        if user:\n            # Generate reset token\n            token = secrets.token_urlsafe(32)\n            reset_token = PasswordResetToken(\n                user_id=user.id,\n                token=token,\n                expires_at=datetime.utcnow() + timedelta(hours=1)\n            )\n            db.session.add(reset_token)\n            db.session.commit()\n            \n            # Send reset email\n            reset_url = url_for('reset_password', token=token, _external=True)\n            subject = \"Password Reset - CashOnDay\"\n            body = f\"\"\"\n            <html>\n            <body>\n                <h2>Password Reset Request</h2>\n                <p>You requested a password reset for your CashOnDay account.</p>\n                <p>Click the link below to reset your password:</p>\n                <a href=\"{reset_url}\" style=\"background-color: #0f4c75; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">Reset Password</a>\n                <p>This link will expire in 1 hour.</p>\n                <p>If you didn't request this reset, please ignore this email.</p>\n            </body>\n            </html>\n            \"\"\"\n            \n            if send_email(email, subject, body):\n                flash(\"Password reset instructions sent to your email.\", \"success\")\n            else:\n                flash(\"Error sending email. Please try again later.\", \"danger\")\n        else:\n            flash(\"If an account with that email exists, you'll receive reset instructions.\", \"info\")\n        \n        return redirect(url_for('login'))\n    return render_template('forgot_password.html')\n\n@app.route('/reset-password/<token>', methods=['GET', 'POST'])\ndef reset_password(token):\n    reset_token = PasswordResetToken.query.filter_by(\n        token=token, \n        used=False\n    ).first()\n    \n    if not reset_token or reset_token.expires_at < datetime.utcnow():\n        flash(\"Invalid or expired reset token.\", \"danger\")\n        return redirect(url_for('forgot_password'))\n    \n    if request.method == 'POST':\n        password = request.form['password']\n        confirm_password = request.form['confirm_password']\n        \n        if password != confirm_password:\n            flash(\"Passwords do not match.\", \"danger\")\n            return render_template('reset_password.html', token=token)\n            \n        is_valid, message = is_valid_password(password)\n        if not is_valid:\n            flash(message, \"danger\")\n            return render_template('reset_password.html', token=token)\n        \n        # Update password\n        user = User.query.get(reset_token.user_id)\n        user.password = generate_password_hash(password)\n        reset_token.used = True\n        db.session.commit()\n        \n        flash(\"Password reset successful. Please log in.\", \"success\")\n        return redirect(url_for('login'))\n    \n    return render_template('reset_password.html', token=token)\n\n@app.route('/logout')\ndef logout():\n    session.clear()\n    flash(\"You have been logged out.\", \"info\")\n    return redirect(url_for('login'))\n\n# ------------------ MAIN ROUTES ------------------\n@app.route('/')\ndef home():\n    return redirect(url_for('dashboard')) if 'user_id' in session else redirect(url_for('login'))\n\n@app.route('/dashboard')\n@requires_auth\ndef dashboard():\n    user = User.query.get(session['user_id'])\n    \n    # Get portfolio summary\n    portfolio = trading_engine.get_portfolio(user.id)\n    positions = trading_engine.get_positions(user.id)\n    recent_trades = trading_engine.get_trade_history(user.id, limit=5)\n    \n    # Get watchlist data\n    watchlist_symbols = [\"AAPL\", \"TSLA\", \"MSFT\", \"GOOGL\", \"AMZN\", \"META\"]\n    watchlist = []\n    for sym in watchlist_symbols:\n        try:\n            data = yf.Ticker(sym).history(period=\"2d\")\n            if not data.empty:\n                price = round(data['Close'].iloc[-1], 2)\n                prev = round(data['Close'].iloc[-2], 2) if len(data) > 1 else price\n                change = round(((price - prev) / prev) * 100, 2)\n                watchlist.append({\"symbol\": sym, \"price\": price, \"change\": change})\n        except:\n            continue\n    \n    # Get recent activities\n    recent_activities = []\n    \n    # Add recent predictions\n    from models import Prediction\n    recent_predictions = Prediction.query.filter_by(user_id=user.id).order_by(Prediction.created_at.desc()).limit(3).all()\n    for pred in recent_predictions:\n        recent_activities.append({\n            'type': 'prediction',\n            'description': f'Predicted {pred.stock_symbol}',\n            'timestamp': pred.created_at,\n            'icon': 'trending-up'\n        })\n    \n    # Add recent trades\n    for trade in recent_trades:\n        recent_activities.append({\n            'type': 'trade',\n            'description': f'{trade[\"side\"]} {trade[\"quantity\"]} {trade[\"symbol\"]}',\n            'timestamp': datetime.fromisoformat(trade['executed_at']),\n            'icon': 'activity'\n        })\n    \n    # Sort activities by timestamp\n    recent_activities.sort(key=lambda x: x['timestamp'], reverse=True)\n    recent_activities = recent_activities[:10]\n    \n    return render_template('dashboard.html', \n                         user=user, \n                         portfolio=portfolio,\n                         positions=positions,\n                         watchlist=watchlist,\n                         recent_trades=recent_trades,\n                         recent_activities=recent_activities)\n\n@app.route('/profile', methods=['GET', 'POST'])\n@requires_auth\ndef profile():\n    user = User.query.get(session['user_id'])\n    \n    if request.method == 'POST':\n        # Update profile\n        user.email = request.form['email']\n        user.full_name = request.form.get('full_name', '')\n        user.phone = request.form.get('phone', '')\n        \n        # Update password if provided\n        current_password = request.form.get('current_password')\n        new_password = request.form.get('new_password')\n        \n        if current_password and new_password:\n            if check_password_hash(user.password, current_password):\n                is_valid, message = is_valid_password(new_password)\n                if is_valid:\n                    user.password = generate_password_hash(new_password)\n                    flash(\"Password updated successfully.\", \"success\")\n                else:\n                    flash(message, \"danger\")\n            else:\n                flash(\"Current password is incorrect.\", \"danger\")\n        \n        db.session.commit()\n        flash(\"Profile updated successfully.\", \"success\")\n        return redirect(url_for('profile'))\n    \n    transactions = Transaction.query.filter_by(user_id=user.id).order_by(Transaction.timestamp.desc()).limit(50).all()\n    return render_template('profile.html', user=user, transactions=transactions)\n\n# ------------------ PREDICTION ROUTES ------------------\n@app.route('/predict', methods=['GET', 'POST'])\n@requires_auth\ndef predict():\n    return render_template('prediction.html')\n\n@app.route('/api/stock-data/<symbol>')\n@requires_auth\ndef get_stock_data(symbol):\n    try:\n        # Validate symbol\n        if not symbol or len(symbol) > 20:\n            return jsonify({'error': 'Invalid stock symbol'}), 400\n        \n        symbol = symbol.upper().strip()\n        \n        # Get symbol variations to try\n        symbol_variations = get_stock_symbol_variations(symbol)\n        \n        stock_data = None\n        working_symbol = None\n        \n        # Try each symbol variation until we find one that works\n        for try_symbol in symbol_variations:\n            try:\n                stock = yf.Ticker(try_symbol)\n                hist = stock.history(period=\"1y\")\n                \n                if not hist.empty and len(hist) > 10:\n                    stock_data = stock\n                    working_symbol = try_symbol\n                    break\n                    \n            except Exception as e:\n                logging.debug(f\"Failed to fetch data for {try_symbol}: {str(e)}\")\n                continue\n        \n        if stock_data is None:\n            return jsonify({'error': f'No data found for {symbol}. Please check the symbol or try the full exchange symbol (e.g., TCS.NS for Indian stocks)'}), 404\n        \n        # Use the working symbol for the rest of the function\n        symbol = working_symbol\n        stock = stock_data\n        \n        # Get historical data (1 year)\n        hist = stock.history(period=\"1y\")\n        \n        if hist.empty:\n            return jsonify({'error': f'No data found for symbol {symbol}'}), 404\n        \n        # Get current stock info\n        info = stock.info\n        \n        # Prepare chart data\n        chart_data = []\n        for date, row in hist.iterrows():\n            chart_data.append({\n                'x': date.strftime('%Y-%m-%d'),\n                'open': round(float(row['Open']), 2),\n                'high': round(float(row['High']), 2),\n                'low': round(float(row['Low']), 2),\n                'close': round(float(row['Close']), 2),\n                'volume': int(row['Volume'])\n            })\n        \n        # Get current price\n        current_price = round(float(hist['Close'].iloc[-1]), 2)\n        prev_close = round(float(hist['Close'].iloc[-2]), 2)\n        price_change = round(current_price - prev_close, 2)\n        price_change_percent = round((price_change / prev_close) * 100, 2)\n        \n        # Calculate basic technical indicators\n        hist['SMA_20'] = hist['Close'].rolling(window=20).mean()\n        hist['SMA_50'] = hist['Close'].rolling(window=50).mean()\n        hist['RSI'] = calculate_rsi(hist['Close'])\n        \n        # Get prediction\n        prediction_result = predictor.predict(hist)\n        \n        # Save prediction to database\n        if prediction_result:\n            from models import Prediction\n            prediction = Prediction(\n                user_id=session['user_id'],\n                stock_symbol=symbol,\n                predicted_price=prediction_result['predicted_price'],\n                confidence_score=prediction_result['confidence'],\n                created_at=datetime.utcnow()\n            )\n            db.session.add(prediction)\n            db.session.commit()\n        \n        # Prepare response\n        response_data = {\n            'symbol': symbol,\n            'company_name': info.get('longName', symbol),\n            'current_price': current_price,\n            'price_change': price_change,\n            'price_change_percent': price_change_percent,\n            'chart_data': chart_data,\n            'technical_indicators': {\n                'sma_20': round(float(hist['SMA_20'].iloc[-1]), 2) if not np.isnan(hist['SMA_20'].iloc[-1]) else None,\n                'sma_50': round(float(hist['SMA_50'].iloc[-1]), 2) if not np.isnan(hist['SMA_50'].iloc[-1]) else None,\n                'rsi': round(float(hist['RSI'].iloc[-1]), 2) if not np.isnan(hist['RSI'].iloc[-1]) else None,\n            },\n            'prediction': prediction_result,\n            'volume': int(hist['Volume'].iloc[-1]),\n            'market_cap': info.get('marketCap'),\n            'pe_ratio': info.get('trailingPE'),\n            'dividend_yield': info.get('dividendYield')\n        }\n        \n        return jsonify(response_data)\n        \n    except Exception as e:\n        logging.error(f\"Error fetching stock data: {str(e)}\")\n        return jsonify({'error': 'An error occurred while fetching stock data'}), 500\n\ndef get_stock_symbol_variations(symbol):\n    \"\"\"Get different stock symbol variations for international exchanges\"\"\"\n    symbol = symbol.upper().strip()\n    \n    # Common stock symbol mappings\n    symbol_mappings = {\n        'TCS': ['INFY', 'TCS.NS'],\n        'TATA': ['TTM', 'TATAMOTORS.NS'],\n        'RELIANCE': ['RELIANCE.NS'],\n        'INFOSYS': ['INFY', 'INFY.NS'],\n        'WIPRO': ['WIT', 'WIPRO.NS'],\n        'HDFC': ['HDB', 'HDFCBANK.NS'],\n        'ICICI': ['IBN', 'ICICIBANK.NS'],\n        'MICROSOFT': ['MSFT'],\n        'APPLE': ['AAPL'],\n        'GOOGLE': ['GOOGL', 'GOOG'],\n        'AMAZON': ['AMZN'],\n        'TESLA': ['TSLA'],\n        'META': ['META'],\n        'NVIDIA': ['NVDA']\n    }\n    \n    if symbol in symbol_mappings:\n        return symbol_mappings[symbol]\n    \n    variations = [symbol]\n    \n    if '.' not in symbol:\n        variations.extend([\n            f\"{symbol}.NS\",\n            f\"{symbol}.BO\",\n            f\"{symbol}.L\",\n            f\"{symbol}.DE\",\n            f\"{symbol}.PA\"\n        ])\n    \n    return variations\n\n# ------------------ TRADING ROUTES ------------------\n@app.route('/trading')\n@requires_auth\ndef trading():\n    user = User.query.get(session['user_id'])\n    portfolio = trading_engine.get_portfolio(user.id)\n    positions = trading_engine.get_positions(user.id)\n    trades = trading_engine.get_trade_history(user.id, limit=20)\n    \n    return render_template('trading.html', \n                         user=user,\n                         portfolio=portfolio,\n                         positions=positions,\n                         trades=trades)\n\n@app.route('/api/place-order', methods=['POST'])\n@requires_auth\ndef place_order():\n    try:\n        data = request.get_json()\n        symbol = data['symbol'].upper()\n        side = data['side'].upper()\n        quantity = int(data['quantity'])\n        order_type = data.get('order_type', 'market')\n        price = float(data.get('price', 0)) if data.get('price') else None\n        \n        # Validate inputs\n        if quantity <= 0:\n            return jsonify({'success': False, 'error': 'Invalid quantity'})\n        \n        if side not in ['BUY', 'SELL']:\n            return jsonify({'success': False, 'error': 'Invalid order side'})\n        \n        # Place order\n        result = trading_engine.place_order(session['user_id'], symbol, side, quantity, price)\n        \n        if result['success']:\n            # Send Telegram notification\n            user = User.query.get(session['user_id'])\n            if user.telegram_chat_id:\n                message = f\"Order Executed: {side} {quantity} {symbol} at ${result['executed_price']:.2f}\"\n                telegram_handler.send_alert(user.telegram_chat_id, message)\n        \n        return jsonify(result)\n        \n    except Exception as e:\n        logging.error(f\"Error placing order: {e}\")\n        return jsonify({'success': False, 'error': str(e)})\n\n# ------------------ NEWS ROUTES ------------------\n@app.route('/news')\n@requires_auth\ndef news():\n    return render_template('news.html')\n\n@app.route('/api/news/<symbol>')\n@requires_auth\ndef get_news(symbol):\n    try:\n        result = analyze_news(symbol)\n        return jsonify(result)\n    except Exception as e:\n        logging.error(f\"Error fetching news: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n# ------------------ SETTINGS ROUTES ------------------\n@app.route('/settings', methods=['GET', 'POST'])\n@requires_auth\ndef settings():\n    user = User.query.get(session['user_id'])\n    user_settings = UserSettings.query.filter_by(user_id=user.id).first()\n    \n    if not user_settings:\n        user_settings = UserSettings(user_id=user.id)\n        db.session.add(user_settings)\n        db.session.commit()\n    \n    if request.method == 'POST':\n        # Update settings\n        user_settings.email_notifications = 'email_notifications' in request.form\n        user_settings.telegram_notifications = 'telegram_notifications' in request.form\n        user_settings.price_alerts = 'price_alerts' in request.form\n        user_settings.news_alerts = 'news_alerts' in request.form\n        user_settings.theme = request.form.get('theme', 'light')\n        \n        # Update Telegram settings\n        telegram_chat_id = request.form.get('telegram_chat_id')\n        if telegram_chat_id:\n            user.telegram_chat_id = telegram_chat_id\n        \n        db.session.commit()\n        flash(\"Settings updated successfully.\", \"success\")\n        return redirect(url_for('settings'))\n    \n    return render_template('settings.html', user=user, settings=user_settings)\n\n@app.route('/alerts')\n@requires_auth\ndef alerts():\n    user_alerts = Alert.query.filter_by(user_id=session['user_id']).order_by(Alert.created_at.desc()).all()\n    return render_template('alerts.html', alerts=user_alerts)\n\n@app.route('/api/create-alert', methods=['POST'])\n@requires_auth\ndef create_alert():\n    try:\n        data = request.get_json()\n        symbol = data['symbol'].upper()\n        condition = data['condition']\n        \n        # Validate condition format\n        if not re.match(r\"Price\\s*([<>]=?|==)\\s*(\\d+\\.?\\d*)\", condition):\n            return jsonify({'success': False, 'error': 'Invalid condition format'})\n        \n        alert = Alert(\n            user_id=session['user_id'],\n            symbol=symbol,\n            condition=condition,\n            status=\"Active\",\n            created_at=datetime.utcnow()\n        )\n        db.session.add(alert)\n        db.session.commit()\n        \n        return jsonify({'success': True, 'alert_id': alert.id})\n        \n    except Exception as e:\n        logging.error(f\"Error creating alert: {e}\")\n        return jsonify({'success': False, 'error': str(e)})\n\n@app.route('/api/delete-alert/<int:alert_id>', methods=['DELETE'])\n@requires_auth\ndef delete_alert(alert_id):\n    try:\n        alert = Alert.query.filter_by(id=alert_id, user_id=session['user_id']).first()\n        if alert:\n            db.session.delete(alert)\n            db.session.commit()\n            return jsonify({'success': True})\n        return jsonify({'success': False, 'error': 'Alert not found'})\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)})\n\n# ------------------ WEBSOCKET EVENTS ------------------\n@socketio.on('connect')\ndef handle_connect():\n    if 'user_id' in session:\n        join_room(f\"user_{session['user_id']}\")\n        emit('status', {'msg': 'Connected to real-time updates'})\n\n@socketio.on('disconnect')\ndef handle_disconnect():\n    if 'user_id' in session:\n        leave_room(f\"user_{session['user_id']}\")\n\n# ------------------ BACKGROUND TASKS ------------------\ndef background_tasks():\n    \"\"\"Background thread for price updates and alert checking\"\"\"\n    while True:\n        try:\n            # Update stock prices\n            stock_simulator.update_prices()\n            \n            # Check alerts every 30 seconds\n            check_alerts()\n            \n            # Emit price updates to connected users\n            prices = stock_simulator.get_all_prices()\n            socketio.emit('price_update', prices, room='prices')\n            \n        except Exception as e:\n            logging.error(f\"Background task error: {e}\")\n        \n        time.sleep(30)\n\n# Start background thread\nif __name__ == \"__main__\":\n    background_thread = threading.Thread(target=background_tasks)\n    background_thread.daemon = True\n    background_thread.start()\n    \n    with app.app_context():\n        db.create_all()\n    \n    socketio.run(app, host='0.0.0.0', port=5000, debug=True)\n","size_bytes":27422},"main.py":{"content":"from app import app, db, socketio\n\nif __name__ == \"__main__\":\n    with app.app_context():\n        db.create_all()\n    \n    socketio.run(app, host='0.0.0.0', port=5000, debug=True)\n","size_bytes":180},"models.py":{"content":"from flask_sqlalchemy import SQLAlchemy\nfrom datetime import datetime\nfrom sqlalchemy import func\n\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(150), unique=True, nullable=False)\n    email = db.Column(db.String(255), unique=True, nullable=False)\n    password = db.Column(db.String(255), nullable=False)\n    full_name = db.Column(db.String(255))\n    phone = db.Column(db.String(20))\n    balance = db.Column(db.Float, default=100000.0)\n    telegram_chat_id = db.Column(db.String(50))\n    alerts_enabled = db.Column(db.Boolean, default=True)\n    email_verified = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    last_login = db.Column(db.DateTime)\n    is_active = db.Column(db.Boolean, default=True)\n\nclass UserSettings(db.Model):\n    __tablename__ = 'user_settings'\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    email_notifications = db.Column(db.Boolean, default=True)\n    telegram_notifications = db.Column(db.Boolean, default=True)\n    price_alerts = db.Column(db.Boolean, default=True)\n    news_alerts = db.Column(db.Boolean, default=True)\n    theme = db.Column(db.String(20), default='light')\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\nclass PasswordResetToken(db.Model):\n    __tablename__ = 'password_reset_tokens'\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    token = db.Column(db.String(255), unique=True, nullable=False)\n    expires_at = db.Column(db.DateTime, nullable=False)\n    used = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass Transaction(db.Model):\n    __tablename__ = 'transactions'\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    stock_symbol = db.Column(db.String(10), nullable=False)\n    quantity = db.Column(db.Integer, nullable=False)\n    price = db.Column(db.Float, nullable=False)\n    action = db.Column(db.String(10), nullable=False)\n    timestamp = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass Prediction(db.Model):\n    __tablename__ = 'predictions'\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    stock_symbol = db.Column(db.String(10), nullable=False)\n    predicted_price = db.Column(db.Float, nullable=False)\n    confidence_score = db.Column(db.Float)\n    shap_explanation = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass News(db.Model):\n    __tablename__ = 'news'\n    id = db.Column(db.Integer, primary_key=True)\n    headline = db.Column(db.Text, nullable=False)\n    sentiment = db.Column(db.String(20))\n    source = db.Column(db.String(100))\n    url = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass Alert(db.Model):\n    __tablename__ = 'alerts'\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    symbol = db.Column(db.String(20), nullable=False)\n    condition = db.Column(db.String(100), nullable=False)  # e.g., \"Price > 200\"\n    status = db.Column(db.String(20), default=\"Active\")\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    triggered_at = db.Column(db.DateTime)\n\nclass Portfolio(db.Model):\n    __tablename__ = 'portfolios'\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    balance = db.Column(db.Float, default=100000.0)  # Starting with $100,000\n    total_value = db.Column(db.Float, default=100000.0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'user_id': self.user_id,\n            'balance': self.balance,\n            'total_value': self.total_value,\n            'created_at': self.created_at.isoformat() if self.created_at else None,\n            'updated_at': self.updated_at.isoformat() if self.updated_at else None\n        }\n\nclass Position(db.Model):\n    __tablename__ = 'positions'\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    symbol = db.Column(db.String(10), nullable=False)\n    quantity = db.Column(db.Integer, nullable=False)\n    avg_price = db.Column(db.Float, nullable=False)\n    current_price = db.Column(db.Float, default=0.0)\n    market_value = db.Column(db.Float, default=0.0)\n    unrealized_pnl = db.Column(db.Float, default=0.0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'user_id': self.user_id,\n            'symbol': self.symbol,\n            'quantity': self.quantity,\n            'avg_price': self.avg_price,\n            'current_price': self.current_price,\n            'market_value': self.market_value,\n            'unrealized_pnl': self.unrealized_pnl,\n            'created_at': self.created_at.isoformat() if self.created_at else None,\n            'updated_at': self.updated_at.isoformat() if self.updated_at else None\n        }\n\nclass Trade(db.Model):\n    __tablename__ = 'trades'\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    symbol = db.Column(db.String(10), nullable=False)\n    side = db.Column(db.String(4), nullable=False)  # 'BUY' or 'SELL'\n    quantity = db.Column(db.Integer, nullable=False)\n    price = db.Column(db.Float, nullable=False)\n    total_amount = db.Column(db.Float, nullable=False)\n    commission = db.Column(db.Float, default=0.0)\n    status = db.Column(db.String(20), default='EXECUTED')\n    executed_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'user_id': self.user_id,\n            'symbol': self.symbol,\n            'side': self.side,\n            'quantity': self.quantity,\n            'price': self.price,\n            'total_amount': self.total_amount,\n            'commission': self.commission,\n            'status': self.status,\n            'executed_at': self.executed_at.isoformat() if self.executed_at else None\n        }\n","size_bytes":6828},"news.py":{"content":"import os\nimport logging\nfrom datetime import datetime\nimport warnings\n\n# Optional imports - handle missing packages gracefully\ntry:\n    import requests\n    REQUESTS_AVAILABLE = True\nexcept ImportError:\n    logging.warning(\"requests not available - using demo data\")\n    REQUESTS_AVAILABLE = False\n\ntry:\n    import yfinance as yf\n    YFINANCE_AVAILABLE = True\nexcept ImportError:\n    logging.warning(\"yfinance not available - using demo data\")\n    YFINANCE_AVAILABLE = False\n\n# Suppress warnings from transformers\nwarnings.filterwarnings(\"ignore\")\n\n# Initialize sentiment analysis pipeline\nsentiment_analyzer = None\ntry:\n    from transformers import pipeline\n    sentiment_analyzer = pipeline(\n        \"sentiment-analysis\", \n        model=\"distilbert-base-uncased-finetuned-sst-2-english\",\n        return_all_scores=True\n    )\n    logging.info(\"Sentiment analysis model loaded successfully\")\nexcept ImportError:\n    logging.warning(\"Transformers not available, using fallback sentiment analysis\")\n    sentiment_analyzer = None\nexcept Exception as e:\n    logging.error(f\"Error loading sentiment model: {e}\")\n    sentiment_analyzer = None\n\ndef get_demo_news(symbol, limit=10):\n    \"\"\"Generate demo news data when APIs are not available\"\"\"\n    demo_articles = [\n        {\n            'title': f'{symbol} Reports Strong Q4 Earnings, Beats Expectations',\n            'description': f'{get_company_name(symbol)} announced impressive quarterly results with revenue growth exceeding analyst predictions.',\n            'url': 'https://example.com/news1',\n            'source': {'name': 'Financial News'},\n            'publishedAt': datetime.now().isoformat() + 'Z'\n        },\n        {\n            'title': f'Analysts Upgrade {symbol} Stock Rating to Buy',\n            'description': f'Major investment firms raise price targets for {get_company_name(symbol)} citing strong fundamentals.',\n            'url': 'https://example.com/news2', \n            'source': {'name': 'Market Watch'},\n            'publishedAt': datetime.now().isoformat() + 'Z'\n        },\n        {\n            'title': f'{symbol} Faces Regulatory Challenges in New Markets',\n            'description': f'{get_company_name(symbol)} encounters potential headwinds from regulatory scrutiny in emerging markets.',\n            'url': 'https://example.com/news3',\n            'source': {'name': 'Business Weekly'},\n            'publishedAt': datetime.now().isoformat() + 'Z'\n        },\n        {\n            'title': f'Innovation Drive: {symbol} Launches New Product Line',\n            'description': f'{get_company_name(symbol)} unveils cutting-edge technology solutions to expand market reach.',\n            'url': 'https://example.com/news4',\n            'source': {'name': 'Tech Today'},\n            'publishedAt': datetime.now().isoformat() + 'Z'\n        },\n        {\n            'title': f'{symbol} Stock Volatile Amid Market Uncertainty',\n            'description': f'Shares of {get_company_name(symbol)} experience fluctuations due to broader market conditions.',\n            'url': 'https://example.com/news5',\n            'source': {'name': 'Markets Daily'},\n            'publishedAt': datetime.now().isoformat() + 'Z'\n        }\n    ]\n    return demo_articles[:limit]\n\ndef fetch_news_newsapi(symbol, limit=10):\n    \"\"\"Fetch news using NewsAPI\"\"\"\n    if not REQUESTS_AVAILABLE:\n        logging.info(\"Using demo news data (requests not available)\")\n        return get_demo_news(symbol, limit)\n        \n    api_key = os.getenv(\"NEWS_API_KEY\")\n    \n    if not api_key:\n        logging.warning(\"NEWS_API_KEY not found in environment variables, using demo data\")\n        return get_demo_news(symbol, limit)\n    \n    url = \"https://newsapi.org/v2/everything\"\n    params = {\n        'q': f'\"{symbol}\" OR \"{get_company_name(symbol)}\"',\n        'language': 'en',\n        'sortBy': 'publishedAt',\n        'pageSize': limit,\n        'apiKey': api_key\n    }\n    \n    try:\n        response = requests.get(url, params=params, timeout=10)\n        response.raise_for_status()\n        data = response.json()\n        \n        if data['status'] == 'ok' and data['articles']:\n            return data['articles']\n        else:\n            logging.warning(f\"No articles found for {symbol}\")\n            return []\n            \n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Error fetching news from NewsAPI: {e}\")\n        return None\n\ndef fetch_news_yahoo(symbol, limit=10):\n    \"\"\"Fetch news using Yahoo Finance (fallback method)\"\"\"\n    if not YFINANCE_AVAILABLE:\n        logging.info(\"Using demo news data (yfinance not available)\")\n        return get_demo_news(symbol, limit)\n        \n    try:\n        ticker = yf.Ticker(symbol)\n        news = ticker.news\n        \n        if not news:\n            return []\n        \n        # Transform Yahoo Finance news format to match NewsAPI format\n        articles = []\n        for item in news[:limit]:\n            articles.append({\n                'title': item.get('title', ''),\n                'description': item.get('summary', ''),\n                'url': item.get('link', ''),\n                'source': {'name': item.get('publisher', 'Yahoo Finance')},\n                'publishedAt': datetime.fromtimestamp(item.get('providerPublishTime', 0)).isoformat() + 'Z'\n            })\n        \n        return articles\n        \n    except ImportError:\n        logging.error(\"yfinance not available\")\n        return None\n    except Exception as e:\n        logging.error(f\"Error fetching news from Yahoo Finance: {e}\")\n        return None\n\ndef get_company_name(symbol):\n    \"\"\"Get company name for better search results\"\"\"\n    company_names = {\n        'AAPL': 'Apple Inc',\n        'TSLA': 'Tesla Inc',\n        'GOOGL': 'Google Alphabet',\n        'MSFT': 'Microsoft Corporation',\n        'AMZN': 'Amazon.com Inc',\n        'NVDA': 'NVIDIA Corporation',\n        'META': 'Meta Platforms Inc',\n        'NFLX': 'Netflix Inc',\n        'AMD': 'Advanced Micro Devices',\n        'INTC': 'Intel Corporation'\n    }\n    return company_names.get(symbol.upper(), symbol)\n\ndef simple_sentiment_analysis(text):\n    \"\"\"Simple fallback sentiment analysis using keyword matching\"\"\"\n    if not text:\n        return {'label': 'NEUTRAL', 'score': 0.5, 'confidence': 'Low'}\n    \n    text_lower = text.lower()\n    \n    # Positive keywords\n    positive_words = ['good', 'great', 'excellent', 'positive', 'up', 'rise', 'gain', 'profit', 'growth', 'strong', 'buy', 'bullish', 'surge', 'boost', 'increase', 'beat', 'exceed', 'outperform', 'success']\n    \n    # Negative keywords\n    negative_words = ['bad', 'terrible', 'negative', 'down', 'fall', 'loss', 'decline', 'weak', 'sell', 'bearish', 'drop', 'crash', 'decrease', 'miss', 'underperform', 'fail', 'concern', 'worry']\n    \n    positive_count = sum(1 for word in positive_words if word in text_lower)\n    negative_count = sum(1 for word in negative_words if word in text_lower)\n    \n    total_sentiment_words = positive_count + negative_count\n    \n    if total_sentiment_words == 0:\n        return {'label': 'NEUTRAL', 'score': 0.5, 'confidence': 'Low'}\n    \n    sentiment_score = positive_count / total_sentiment_words\n    \n    if sentiment_score > 0.6:\n        label = 'POSITIVE'\n        confidence = 'Medium' if sentiment_score > 0.8 else 'Low'\n    elif sentiment_score < 0.4:\n        label = 'NEGATIVE'\n        confidence = 'Medium' if sentiment_score < 0.2 else 'Low'\n    else:\n        label = 'NEUTRAL'\n        confidence = 'Low'\n    \n    return {\n        'label': label,\n        'score': round(sentiment_score, 3),\n        'confidence': confidence\n    }\n\ndef analyze_sentiment(text):\n    \"\"\"Analyze sentiment of a text using HuggingFace model or fallback\"\"\"\n    if not text:\n        return {\n            'label': 'NEUTRAL',\n            'score': 0.5,\n            'confidence': 'Low'\n        }\n    \n    # Try HuggingFace model first\n    if sentiment_analyzer:\n        try:\n            # Get sentiment prediction\n            results = sentiment_analyzer(text[:512])  # Limit text length\n            \n            # Extract the best prediction\n            best_result = max(results[0], key=lambda x: x['score'])\n            \n            # Map labels and determine confidence\n            label_map = {'POSITIVE': 'POSITIVE', 'NEGATIVE': 'NEGATIVE'}\n            sentiment_label = label_map.get(best_result['label'], 'NEUTRAL')\n            \n            confidence_level = 'High' if best_result['score'] > 0.8 else 'Medium' if best_result['score'] > 0.6 else 'Low'\n            \n            return {\n                'label': sentiment_label,\n                'score': round(best_result['score'], 3),\n                'confidence': confidence_level\n            }\n            \n        except Exception as e:\n            logging.error(f\"Error in HuggingFace sentiment analysis: {e}\")\n    \n    # Fallback to simple sentiment analysis\n    return simple_sentiment_analysis(text)\n\ndef analyze_news(symbol):\n    \"\"\"Main function to fetch news and analyze sentiment\"\"\"\n    logging.info(f\"Starting news analysis for {symbol}\")\n    \n    # Try NewsAPI first, then Yahoo Finance as fallback\n    articles = fetch_news_newsapi(symbol)\n    \n    if articles is None:\n        logging.info(\"NewsAPI failed, trying Yahoo Finance...\")\n        articles = fetch_news_yahoo(symbol)\n    \n    if articles is None:\n        return {\"error\": \"Failed to fetch news from any source. Please check your API keys and internet connection.\"}\n    \n    if not articles:\n        return {\"error\": f\"No news articles found for symbol {symbol}. Please try a different stock symbol.\"}\n    \n    # Analyze sentiment for each article\n    analyzed_articles = []\n    sentiment_counts = {'POSITIVE': 0, 'NEGATIVE': 0, 'NEUTRAL': 0}\n    \n    for article in articles:\n        # Combine title and description for better sentiment analysis\n        text_to_analyze = f\"{article.get('title', '')} {article.get('description', '')}\"\n        sentiment = analyze_sentiment(text_to_analyze)\n        \n        # Parse published date\n        try:\n            pub_date = datetime.fromisoformat(article.get('publishedAt', '').replace('Z', '+00:00'))\n            formatted_date = pub_date.strftime('%Y-%m-%d %H:%M UTC')\n        except:\n            formatted_date = 'Unknown'\n        \n        analyzed_article = {\n            'title': article.get('title', 'No Title'),\n            'description': article.get('description', ''),\n            'url': article.get('url', ''),\n            'source': article.get('source', {}).get('name', 'Unknown'),\n            'publishedAt': formatted_date,\n            'sentiment': sentiment\n        }\n        \n        analyzed_articles.append(analyzed_article)\n        sentiment_counts[sentiment['label']] += 1\n    \n    # Calculate sentiment percentages\n    total_articles = len(analyzed_articles)\n    sentiment_distribution = {\n        'positive': round((sentiment_counts['POSITIVE'] / total_articles) * 100, 1),\n        'negative': round((sentiment_counts['NEGATIVE'] / total_articles) * 100, 1),\n        'neutral': round((sentiment_counts['NEUTRAL'] / total_articles) * 100, 1)\n    }\n    \n    # Calculate overall sentiment score\n    overall_score = (sentiment_counts['POSITIVE'] - sentiment_counts['NEGATIVE']) / total_articles\n    overall_sentiment = 'POSITIVE' if overall_score > 0.1 else 'NEGATIVE' if overall_score < -0.1 else 'NEUTRAL'\n    \n    result = {\n        'symbol': symbol,\n        'articles': analyzed_articles,\n        'sentiment_distribution': sentiment_distribution,\n        'sentiment_counts': sentiment_counts,\n        'overall_sentiment': overall_sentiment,\n        'overall_score': round(overall_score, 3),\n        'total_articles': total_articles,\n        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')\n    }\n    \n    logging.info(f\"Successfully analyzed {total_articles} articles for {symbol}\")\n    return result\n","size_bytes":11848},"paper_trading.py":{"content":"from models import Portfolio, Position, Trade\nfrom models import db\n\nfrom datetime import datetime\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass PaperTradingEngine:\n    def __init__(self, database):\n        self.db = database\n        \n    def get_portfolio(self, user_id):\n        \"\"\"Get user's portfolio information\"\"\"\n        portfolio = Portfolio.query.filter_by(user_id=user_id).first()\n        if not portfolio:\n            # Create default portfolio\n            portfolio = Portfolio(user_id=user_id, balance=100000.0, total_value=100000.0)\n            self.db.session.add(portfolio)\n            self.db.session.commit()\n        \n        # Update portfolio value with current positions\n        self.update_portfolio_value(user_id)\n        return portfolio.to_dict()\n    \n    def get_positions(self, user_id):\n        \"\"\"Get user's current positions\"\"\"\n        positions = Position.query.filter_by(user_id=user_id).all()\n        return [pos.to_dict() for pos in positions]\n    \n    def get_trade_history(self, user_id, limit=50):\n        \"\"\"Get user's trade history\"\"\"\n        trades = Trade.query.filter_by(user_id=user_id)\\\n                           .order_by(Trade.executed_at.desc())\\\n                           .limit(limit).all()\n        return [trade.to_dict() for trade in trades]\n    \n    def place_order(self, user_id, symbol, side, quantity, price=None):\n        \"\"\"Place a buy or sell order\"\"\"\n        try:\n            # Get current market price (simulated)\n            from stock_simulator import StockSimulator\n            simulator = StockSimulator()\n            market_price = simulator.get_price(symbol)\n            \n            if not market_price:\n                return {'success': False, 'error': 'Invalid symbol'}\n            \n            execution_price = price if price else market_price\n            total_amount = execution_price * quantity\n            \n            # Get user's portfolio\n            portfolio = Portfolio.query.filter_by(user_id=user_id).first()\n            if not portfolio:\n                return {'success': False, 'error': 'Portfolio not found'}\n            \n            if side.upper() == 'BUY':\n                # Check if user has enough balance\n                if portfolio.balance < total_amount:\n                    return {'success': False, 'error': 'Insufficient funds'}\n                \n                # Update portfolio balance\n                portfolio.balance -= total_amount\n                \n                # Update or create position\n                position = Position.query.filter_by(user_id=user_id, symbol=symbol).first()\n                if position:\n                    # Calculate new average price\n                    total_shares = position.quantity + quantity\n                    total_cost = (position.avg_price * position.quantity) + total_amount\n                    position.avg_price = total_cost / total_shares\n                    position.quantity = total_shares\n                else:\n                    # Create new position\n                    position = Position(\n                        user_id=user_id,\n                        symbol=symbol,\n                        quantity=quantity,\n                        avg_price=execution_price\n                    )\n                    self.db.session.add(position)\n                \n            elif side.upper() == 'SELL':\n                # Check if user has enough shares\n                position = Position.query.filter_by(user_id=user_id, symbol=symbol).first()\n                if not position or position.quantity < quantity:\n                    return {'success': False, 'error': 'Insufficient shares'}\n                \n                # Update portfolio balance\n                portfolio.balance += total_amount\n                \n                # Update position\n                position.quantity -= quantity\n                if position.quantity == 0:\n                    self.db.session.delete(position)\n            \n            else:\n                return {'success': False, 'error': 'Invalid side'}\n            \n            # Create trade record\n            trade = Trade(\n                user_id=user_id,\n                symbol=symbol,\n                side=side.upper(),\n                quantity=quantity,\n                price=execution_price,\n                total_amount=total_amount,\n                commission=0.0  # No commission for paper trading\n            )\n            self.db.session.add(trade)\n            \n            # Update portfolio timestamp\n            portfolio.updated_at = datetime.utcnow()\n            \n            self.db.session.commit()\n            \n            logger.info(f\"Order executed: {side} {quantity} {symbol} at ${execution_price}\")\n            \n            return {\n                'success': True,\n                'trade_id': trade.id,\n                'executed_price': execution_price,\n                'total_amount': total_amount\n            }\n            \n        except Exception as e:\n            logger.error(f\"Error placing order: {e}\")\n            self.db.session.rollback()\n            return {'success': False, 'error': str(e)}\n    \n    def update_portfolio_value(self, user_id):\n        \"\"\"Update portfolio total value based on current positions\"\"\"\n        try:\n            portfolio = Portfolio.query.filter_by(user_id=user_id).first()\n            if not portfolio:\n                return\n            \n            positions = Position.query.filter_by(user_id=user_id).all()\n            \n            from stock_simulator import StockSimulator\n            simulator = StockSimulator()\n            \n            total_position_value = 0.0\n            \n            for position in positions:\n                current_price = simulator.get_price(position.symbol)\n                if current_price:\n                    position.current_price = current_price\n                    position.market_value = position.quantity * current_price\n                    position.unrealized_pnl = position.market_value - (position.quantity * position.avg_price)\n                    total_position_value += position.market_value\n            \n            portfolio.total_value = portfolio.balance + total_position_value\n            self.db.session.commit()\n            \n        except Exception as e:\n            logger.error(f\"Error updating portfolio value: {e}\")\n            self.db.session.rollback()\n","size_bytes":6386},"prediction.py":{"content":"import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nimport logging\nfrom datetime import datetime, timedelta\n\nclass StockPredictor:\n    def __init__(self):\n        self.model = None\n        self.scaler = StandardScaler()\n        self.feature_importance = None\n        \n    def prepare_features(self, data):\n        \"\"\"Prepare features for machine learning model\"\"\"\n        df = data.copy()\n        \n        # Calculate technical indicators\n        df['SMA_5'] = df['Close'].rolling(window=5).mean()\n        df['SMA_10'] = df['Close'].rolling(window=10).mean()\n        df['SMA_20'] = df['Close'].rolling(window=20).mean()\n        df['SMA_50'] = df['Close'].rolling(window=50).mean()\n        \n        # Price ratios\n        df['Price_SMA5_Ratio'] = df['Close'] / df['SMA_5']\n        df['Price_SMA20_Ratio'] = df['Close'] / df['SMA_20']\n        \n        # Volatility\n        df['Volatility'] = df['Close'].rolling(window=10).std()\n        \n        # Volume indicators\n        df['Volume_SMA'] = df['Volume'].rolling(window=10).mean()\n        df['Volume_Ratio'] = df['Volume'] / df['Volume_SMA']\n        \n        # Price momentum\n        df['Momentum_5'] = df['Close'] / df['Close'].shift(5)\n        df['Momentum_10'] = df['Close'] / df['Close'].shift(10)\n        \n        # RSI\n        df['RSI'] = self.calculate_rsi(df['Close'])\n        \n        # MACD\n        exp1 = df['Close'].ewm(span=12).mean()\n        exp2 = df['Close'].ewm(span=26).mean()\n        df['MACD'] = exp1 - exp2\n        df['MACD_Signal'] = df['MACD'].ewm(span=9).mean()\n        \n        # Bollinger Bands\n        df['BB_Middle'] = df['Close'].rolling(window=20).mean()\n        bb_std = df['Close'].rolling(window=20).std()\n        df['BB_Upper'] = df['BB_Middle'] + (bb_std * 2)\n        df['BB_Lower'] = df['BB_Middle'] - (bb_std * 2)\n        df['BB_Position'] = (df['Close'] - df['BB_Lower']) / (df['BB_Upper'] - df['BB_Lower'])\n        \n        # High-Low ratios\n        df['HL_Ratio'] = df['High'] / df['Low']\n        df['OC_Ratio'] = df['Open'] / df['Close']\n        \n        # Select features for prediction\n        feature_columns = [\n            'SMA_5', 'SMA_10', 'SMA_20', 'SMA_50',\n            'Price_SMA5_Ratio', 'Price_SMA20_Ratio',\n            'Volatility', 'Volume_Ratio',\n            'Momentum_5', 'Momentum_10',\n            'RSI', 'MACD', 'MACD_Signal',\n            'BB_Position', 'HL_Ratio', 'OC_Ratio'\n        ]\n        \n        return df[feature_columns].dropna()\n    \n    def calculate_rsi(self, prices, window=14):\n        \"\"\"Calculate Relative Strength Index\"\"\"\n        delta = prices.diff()\n        gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()\n        loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()\n        rs = gain / loss\n        rsi = 100 - (100 / (1 + rs))\n        return rsi\n    \n    def train_model(self, features, target):\n        \"\"\"Train the prediction model\"\"\"\n        if len(features) < 50:  # Need minimum data for training\n            return False\n            \n        # Split data\n        X_train, X_test, y_train, y_test = train_test_split(\n            features, target, test_size=0.2, random_state=42\n        )\n        \n        # Scale features\n        X_train_scaled = self.scaler.fit_transform(X_train)\n        X_test_scaled = self.scaler.transform(X_test)\n        \n        # Train Random Forest model\n        self.model = RandomForestRegressor(\n            n_estimators=100,\n            max_depth=10,\n            random_state=42,\n            n_jobs=-1\n        )\n        \n        self.model.fit(X_train_scaled, y_train)\n        \n        # Calculate feature importance\n        self.feature_importance = dict(zip(\n            features.columns,\n            self.model.feature_importances_\n        ))\n        \n        # Evaluate model\n        y_pred = self.model.predict(X_test_scaled)\n        mae = mean_absolute_error(y_test, y_pred)\n        rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n        \n        logging.info(f\"Model trained. MAE: {mae:.4f}, RMSE: {rmse:.4f}\")\n        \n        return True\n    \n    def predict(self, stock_data):\n        \"\"\"Generate prediction for stock data\"\"\"\n        try:\n            # Prepare features\n            features = self.prepare_features(stock_data)\n            \n            if len(features) < 50:\n                return None\n            \n            # Prepare target (next day's closing price)\n            target = stock_data['Close'].shift(-1).dropna()\n            \n            # Align features and target\n            min_length = min(len(features), len(target))\n            features = features.iloc[:min_length]\n            target = target.iloc[:min_length]\n            \n            # Train model\n            if not self.train_model(features, target):\n                return None\n            \n            # Make prediction for next day\n            latest_features = features.iloc[-1:].values\n            latest_features_scaled = self.scaler.transform(latest_features)\n            \n            predicted_price = self.model.predict(latest_features_scaled)[0]\n            current_price = stock_data['Close'].iloc[-1]\n            \n            # Calculate prediction metrics\n            price_change = predicted_price - current_price\n            price_change_percent = (price_change / current_price) * 100\n            \n            # Generate confidence score based on recent volatility\n            recent_volatility = stock_data['Close'].tail(10).std()\n            avg_price = stock_data['Close'].tail(10).mean()\n            volatility_ratio = recent_volatility / avg_price\n            confidence = max(0.3, min(0.95, 1 - (volatility_ratio * 10)))\n            \n            # Generate explanation based on feature importance\n            explanation = self.generate_explanation(features.iloc[-1])\n            \n            # Determine trend\n            if price_change_percent > 1:\n                trend = \"Strong Bullish\"\n            elif price_change_percent > 0:\n                trend = \"Bullish\"\n            elif price_change_percent > -1:\n                trend = \"Bearish\"\n            else:\n                trend = \"Strong Bearish\"\n            \n            return {\n                'predicted_price': round(predicted_price, 2),\n                'current_price': round(current_price, 2),\n                'price_change': round(price_change, 2),\n                'price_change_percent': round(price_change_percent, 2),\n                'confidence': round(confidence * 100, 1),\n                'trend': trend,\n                'explanation': explanation,\n                'prediction_date': (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d'),\n                'model_accuracy': round((1 - volatility_ratio) * 100, 1)\n            }\n            \n        except Exception as e:\n            logging.error(f\"Error in prediction: {str(e)}\")\n            return None\n    \n    def generate_explanation(self, latest_features):\n        \"\"\"Generate explainable AI reasoning for the prediction\"\"\"\n        if self.feature_importance is None:\n            return [\"Model training in progress...\"]\n        \n        # Get top 3 most important features\n        top_features = sorted(\n            self.feature_importance.items(),\n            key=lambda x: x[1],\n            reverse=True\n        )[:3]\n        \n        explanations = []\n        \n        for feature, importance in top_features:\n            feature_value = latest_features[feature]\n            \n            if 'SMA' in feature:\n                if feature_value > 1:\n                    explanations.append(f\"Price is above {feature.replace('_', ' ')} (bullish indicator)\")\n                else:\n                    explanations.append(f\"Price is below {feature.replace('_', ' ')} (bearish indicator)\")\n            \n            elif 'RSI' in feature:\n                if feature_value > 70:\n                    explanations.append(\"RSI indicates overbought conditions (potential reversal)\")\n                elif feature_value < 30:\n                    explanations.append(\"RSI indicates oversold conditions (potential upside)\")\n                else:\n                    explanations.append(\"RSI shows neutral momentum\")\n            \n            elif 'Volatility' in feature:\n                if feature_value > latest_features.std():\n                    explanations.append(\"High volatility suggests increased uncertainty\")\n                else:\n                    explanations.append(\"Low volatility suggests stable price movement\")\n            \n            elif 'Volume' in feature:\n                if feature_value > 1:\n                    explanations.append(\"Above-average volume supports price movement\")\n                else:\n                    explanations.append(\"Below-average volume indicates weak conviction\")\n            \n            elif 'Momentum' in feature:\n                if feature_value > 1:\n                    explanations.append(\"Positive momentum suggests continued upward movement\")\n                else:\n                    explanations.append(\"Negative momentum suggests downward pressure\")\n        \n        return explanations[:3]  # Return top 3 explanations\n","size_bytes":9376},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.3.0\",\n    \"flask-bcrypt>=1.0.1\",\n    \"flask>=3.1.2\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"numpy>=2.3.2\",\n    \"pandas>=2.3.2\",\n    \"psycopg2-binary>=2.9.10\",\n    \"scikit-learn>=1.7.1\",\n    \"requests>=2.32.5\",\n    \"yfinance>=0.2.65\",\n    \"telegram>=0.0.1\",\n    \"werkzeug>=3.1.3\",\n    \"flask-socketio>=5.5.1\",\n    \"python-dotenv>=1.1.1\",\n    \"plotly>=6.3.0\",\n    \"sqlalchemy>=2.0.43\",\n    \"python-telegram-bot>=22.3\",\n]\n\n[[tool.uv.index]]\nexplicit = true\nname = \"pytorch-cpu\"\nurl = \"https://download.pytorch.org/whl/cpu\"\n\n[tool.uv.sources]\nAA-module = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nABlooper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nAnalysisG = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nAutoRAG = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nBERTeam = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nBxTorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nByaldi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCALM-Pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCOPEX-high-rate-compression-quality-metrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCityLearn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCoCa-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCoLT5-attention = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nComfyUI-EasyNodes = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCrawl4AI = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDALL-E = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDI-toolkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDatasetRising = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDeepCache = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDeepMatter = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDraugr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nESRNN = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nEn-transformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nExpoSeq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nFLAML = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nFSRS-Optimizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nGANDLF = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nGQLAlchemy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nGhostScan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nGraKeL = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nHEBO = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nIOPaint = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nISLP = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nInvokeAI = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nJAEN = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nKapoorLabs-Lightning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nLightAutoML = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nLingerGRN = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nMMEdu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nMRzeroCore = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nModeva = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nNeuralFoil = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nNiMARE = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nNinjaTools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nOpenHosta = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nOpenNMT-py = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPOT = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPVNet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPaLM-rlhf-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPepperPepper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPiML = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPoutyne = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nQNCP = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nRAGatouille = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nRareGO = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nRealtimeSTT = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nRelevanceAI-Workflows-Core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nResemblyzer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nScandEval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nSimba-UW-tf-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nSwissArmyTransformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nTPOT = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nTTS = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nTorchCRF = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nTotalSegmentator = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nUtilsRL = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nWhisperSpeech = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nXAISuite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\na-unet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\na5dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naccelerate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naccelerated-scan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naccern-xyme = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nachatbot = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nacids-rave = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nactorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nacvl-utils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadabelief-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadam-atan2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadan-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadapters = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadmin-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadtoolbox = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadversarial-robustness-toolbox = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naeiou = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naeon = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nafricanwhisper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nag-llama-api = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nagentdojo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nagilerl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai-edge-torch-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai-parrot = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai-python = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai-transform = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai2-olmo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai2-olmo-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai2-tango = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naicmder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naider-chat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naider-chat-x = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naif360 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naihwkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naimodelshare = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nairllm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nairtestProject = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nairunner = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naisak = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naislib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naisquared = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naistore = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naithree = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nakasha-terminal = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalibi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalibi-detect = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalignn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nall-clip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallennlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallennlp-models = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallennlp-pvt-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallophant = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallosaurus = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naloy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalpaca-eval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalphafold2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalphafold3-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalphamed-federated = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalphawave = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\namazon-braket-pennylane-plugin = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\namazon-photos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nanemoi-graphs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nanemoi-models = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nanomalib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\napache-beam = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\napache-tvm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naperturedb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naphrodite-engine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naqlm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narcAGI2024 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narchisound = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nargbind = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narize = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narm-pytorch-utilities = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narray-api-compat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narus = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nassert-llm-tools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nasteroid = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nasteroid-filterbanks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nastra-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nastrovision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\natomate2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nattacut = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudio-diffusion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudio-encoders-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudio-separator = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudiocraft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudiolm-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nauralis = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nauraloss = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nauto-gptq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nautoawq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nautoawq-kernels = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"autogluon.multimodal\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"autogluon.tabular\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"autogluon.timeseries\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nautotrain-advanced = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\navdeepfake1m = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naws-fortuna = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nax-platform = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-automl-dnn-vision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-contrib-automl-dnn-forecasting = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-evaluate-mlflow = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-metrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-train-automl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nb2bTools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbackpack-for-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbalrog-nle = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbatch-face = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbatchalign = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbatchgeneratorsv2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbatchtensor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbbrl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbenchpots = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbent = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbert-score = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbertopic = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbertviz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbestOf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbetty-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbig-sleep = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbigdl-core-cpp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbigdl-core-npu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbigdl-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbigdl-nano = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"bioimageio.core\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbitfount = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbitsandbytes = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbittensor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbittensor-cli = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nblackboxopt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nblanc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nblindai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbm25-pt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nboltz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbotorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nboxmot = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbrainchain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbraindecode = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbrevitas = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbriton = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbrowsergym-visualwebarena = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbuzz-captions = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbyotrack = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbyzerllm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nc4v-py = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncalflops = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncame-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncamel-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncamel-tools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncannai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncaptum = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncarte-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncarvekit-colab = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncatalyst = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncausalml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncausalnex = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncausy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncbrkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncca-zoo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncdp-backend = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncellacdc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncellfinder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncellpose = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncellxgene-census = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nchattts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nchemprop = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nchgnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nchitra = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncircuitsvis = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncjm-yolox-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclarinpl-embeddings = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclass-resolver = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclassifier-free-guidance-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclassiq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclassy-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclean-fid = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncleanvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-anytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-benchmark = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-by-openai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-interrogator = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-retrieval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncltk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclusterops = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncnocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncnstd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncoba = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncofi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncolbert-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncolpali-engine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncompel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposabl-ray = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposabl-ray-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposabl-train = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposabl-train-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncompressai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncompressed-tensors = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncompressed-tensors-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nconcrete-python = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nconfit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nconformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncontextualSpellCheck = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncontinual-inference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncontrolnet-aux = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nconvokit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncoola = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncoqui-tts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncoqui-tts-trainer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncraft-text-detector = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncreme = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncrocodile = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncrowd-kit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncryoSPHERE = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncsle-common = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncsle-system-identification = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nctgan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncurated-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncut-cross-entropy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncvat-sdk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncybertask = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nd3rlpy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndalle-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndalle2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndanila-lib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndanling = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndarts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndarwin-py = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndata-gradients = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatachain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndataclass-array = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndataeval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatarobot-drum = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatarobotx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatasets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatumaro = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndctorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeep-utils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepchecks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepchem = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepctr-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepecho = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepepochs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepforest = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeeplabcut = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepmd-kit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepmultilingualpunctuation = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepparse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeeprobust = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepsparse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepsparse-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepspeed = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndenoising-diffusion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndescript-audio-codec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndescript-audiotools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndetecto = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndetoxify = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndgenerate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndghs-imgutils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndgl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndialogy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndice-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndiffgram = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndiffq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndiffusers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndistilabel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndistrifuser = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndnikit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndocarray = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndoclayout-yolo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndocling-ibm-models = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndocquery = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndomino-code-assist = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndreamsim = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndropblock = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndruida = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndvclive = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ne2-tts-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ne2cnn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ne3nn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neasyocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nebtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\necallisto-ng = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nedsnlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neffdet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neinx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neir-dl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neis1600 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neland = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nema-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nembedchain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nenformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nentmax = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nesm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nespaloma-charge = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nespnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\netils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\netna = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nevadb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nevalscope = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nevaluate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nexllamav2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nextractable = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nface-alignment = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfacenet-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfacexlib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfair-esm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfairseq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfairseq2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfairseq2n = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfaker-file = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfarm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfast-bert = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfast-pytorch-kmeans = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfastai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfastcore = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfastestimator-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfasttreeshap = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfedml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfelupe = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfemr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfft-conv-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfickling = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfireworks-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflair = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflashrag-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflax = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflexgen = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflgo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflopth = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflowcept = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflytekitplugins-kfpytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflytekitplugins-onnxpytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfmbench = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfocal-frequency-loss = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfoldedtensor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfractal-tasks-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfreegenius = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfreqtrade = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfschat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfunasr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfunctorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfunlbm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfunsor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngalore-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngarak = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngarf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngateloop-transformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngeffnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngenutility = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngfpgan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngigagan-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngin-config = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nglasflow = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngliner = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngluonts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngmft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngoogle-cloud-aiplatform = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngpforecaster = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngpt3discord = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngpytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngrad-cam = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngraph-weather = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngraphistry = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngravitorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngretel-synthetics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngsplat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nguardrails-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nguidance = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngymnasium = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhanlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhappytransformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhbutils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nheavyball = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhezar = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhf-deepali = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhf-doc-builder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhigher = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhjxdl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhkkang-utils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhordelib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhpsv2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhuggingface-hub = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhummingbird-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhvae-backbone = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhya = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhypothesis-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nibm-metrics-plugin = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nibm-watson-machine-learning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nibm-watsonx-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nicetk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nicevision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\niden = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nidvpackage = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\niglovikov-helper-functions = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nimagededup = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nimagen-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nimaginAIry = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nimg2vec-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nincendio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninference-gpu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninfinity-emb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninfo-nce-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninfoapps-mlops-sdk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab-dolomite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab-eval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab-sdg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab-training = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninvisible-watermark = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\niobm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nipex-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\niree-turbine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nirisml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nirisml-tasks-azure-openai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nirisml-tasks-torchvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nirisml-tasks-training = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nitem-matching = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nivadomed = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\njaqpotpy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\njina = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\njudo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\njunky = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nk-diffusion = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nk1lib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nk2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkappadata = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkappamodules = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkarbonn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkats = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkbnf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkedro-datasets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkeybert = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkeytotext = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkhoj = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkiui = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkonfuzio-sdk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkornia = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkornia-moons = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkraken = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkwarray = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkwimage = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlabml-nn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlagent = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlaion-clap = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlale = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlama-cleaner = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlancedb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlangcheck = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlangkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlangroid = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlangtest = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlayoutparser = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nldp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nleafmap = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nleap-ie = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nleibniz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nleptonai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nletmedoit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlhotse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlib310 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlibpecos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlibrec-auto = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlibretranslate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nliger-kernel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nliger-kernel-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning-bolts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning-fabric = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning-habana = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning-lite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightrag = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightweight-gan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightwood = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlinear-attention-transformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlinear-operator = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlinformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlinformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nliom-toolkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlit-nlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlitdata = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlitelama = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlitgpt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-embeddings-adapter = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-embeddings-clip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-embeddings-instructor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-llms-huggingface = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-postprocessor-colbert-rerank = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm-blender = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm-foundry = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm-guard = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm-rs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm2vec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllmcompressor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllmlingua = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllmvm-cli = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlm-eval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlmdeploy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlmms-eval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlocal-attention = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlovely-tensors = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlpips = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlycoris-lora = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmace-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmagic-pdf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmagicsoup = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmagvit2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmaite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmanga-ocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmanifest-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmanipulation = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmarker-pdf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmatgl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmed-imagetools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmedaka = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmedcat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmedmnist = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmegablocks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmegatron-energon = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmemos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmeshgpt-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmetatensor-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmflux = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmia-vgg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmiditok = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nminari = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nminicons = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nml2rt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlagents = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlbench-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlcroissant = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlpfile = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlx-whisper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmaction2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmengine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmengine-lite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmpose = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmsegmentation = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmodeci-mdf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmodel2vec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmodelscope = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmodelspec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmonai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmonai-weekly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmonotonic-alignment-search = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmonty = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmosaicml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmosaicml-streaming = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmoshi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmteb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmtmtrain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmulti-quantization = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmyhand = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnGPT-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnaeural-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnapari = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnapatrackmater = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnara-wpe = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnatten = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnbeats-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnebulae = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnemo-toolkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneptune = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneptune-client = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnerfacc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnerfstudio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnessai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnetcal = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneural-rag = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneuralforecast = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneuralnets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneuralprophet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneuspell = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnevergrad = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnexfort = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnimblephysics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnirtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnkululeko = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnlptooltest = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnnAudio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnnodely = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnnsight = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnnunetv2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnoisereduce = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnonebot-plugin-nailongremove = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnowcasting-dataloader = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnowcasting-forecast = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnshtrainer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnuwa-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnvflare = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnvidia-modelopt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nocf-datapipes = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nocnn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nogb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nohmeow-blurr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nolive-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nomlt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nommlx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nonediff = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nonediffx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nonnx2pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nonnx2torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopacus = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopen-clip-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopen-flamingo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopen-interpreter = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenbb-terminal-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenmim = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenparse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenunmix = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenvino-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenvino-tokenizers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenvino-xai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenwakeword = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopt-einsum-fx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum-habana = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum-intel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum-neuron = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum-quanto = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptree = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptuna = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptuna-dashboard = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptuna-integration = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noracle-ads = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\norbit-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\notx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noutetts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noutlines = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noutlines-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npaddlenlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npai-easycv = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npandasai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npanns-inference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npatchwork-cli = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npeft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npegasuspy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npelutils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npenn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nperforatedai-freemium = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nperformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npetastorm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npfio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npgmpy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nphenolrs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nphobos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npi-zero-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npinecone-text = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npiq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npix2tex = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npix2text = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npnnx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npolicyengine-us-data = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npolyfuzz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npomegranate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npositional-encodings = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nprefigure = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nproduct-key-memory = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nptflops = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nptwt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npulser-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npunctuators = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npy2ls = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyabsa = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"pyannote.audio\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyawd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyclarity = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npycox = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyfemtet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyg-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npygrinder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyhealth = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyhf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyiqa = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npykeen = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npykeops = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npylance = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npylineaGT = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npymanopt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npymde = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npypots = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyqlib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyqtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyro-ppl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npysentimiento = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyserini = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npysr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npythainlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npython-doctr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-fid = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-forecasting = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-ignite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-kinematics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-lightning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-lightning-bolts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-metric-learning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-model-summary = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-msssim = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-pfn-extras = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-pretrained-bert = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-ranger = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-seed = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-tabnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-tabular = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-toolbelt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-transformers-pvt-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-triton-rocm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-warmup = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-wavelets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch_optimizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch_revgrad = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorchcv = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorchltr2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyvene = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyvespa = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nqianfan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nqibo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nqiskit-machine-learning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nqtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nquanto = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nquick-anomaly-detector = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrastervision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrastervision-pytorch-backend = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrastervision-pytorch-learner = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nray-lightning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrclip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrealesrgan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrecbole = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrecommenders = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nredcat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nreformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nregex-sampler = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nreplay-rec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrerankers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nresearch-framework = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nresemble-enhance = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nresnest = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrf-clip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrf-groundingdino = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrfconv = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrich-logger = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nring-attention-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrltrade-test = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrotary-embedding-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrsp-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrust-circuit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ns2fft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ns3prl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ns3torchconnector = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsaferx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsafetensors = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsagemaker-huggingface-inference-toolkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsagemaker-ssh-helper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsalesforce-lavis = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsalesforce-merlion = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsamv2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nscib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nscib-metrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nscvi-tools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsdmetrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsecretflow = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsegment-anything-hq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsegment-anything-py = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsegmentation-models-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nself-rewarding-lm-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsemantic-kernel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsemantic-router = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsenselab = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsent2vec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsentence-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsequence-model-train = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nserotiny = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsevenn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsglang = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nshap = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsilero-api-server = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsilero-vad = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsilicondiff-npu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsimclr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsimple-lama-inpainting = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsinabs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsixdrepnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nskforecast = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nskorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nskrl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nskt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsktime = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsktmls = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nslangtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmartnoise-synth = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmashed = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmplx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmqtk-descriptors = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmqtk-detection = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsnntorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsnorkel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsnowflake-ml-python = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nso-vits-svc-fork = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsonusai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsony-custom-layers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsotopia = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-curated-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-experimental = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-huggingface-pipelines = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspan-marker = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspandrel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspandrel-extra-arches = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsparrow-python = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspatialdata = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspeechbrain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspeechtokenizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspikeinterface = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspikingjelly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspotiflow = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspotpython = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspotriver = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsquirrel-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstable-baselines3 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstable-diffusion-sdkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstable-ts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstanford-stk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstanfordnlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstanza = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstartorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstreamtasks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstruct-eqtable = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstylegan2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsupar = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsuper-gradients = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsuper-image = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsuperlinked = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsupervisely = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsurya-ocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsvdiff-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nswarm-models = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nswarmauri = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nswarms-memory = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nswebench = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsyft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsympytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsyne-tune = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsynthcity = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nt5 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntab-transformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntabpfn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntaming-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntaming-transformers-rom1504 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntaskwiz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntbparse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntecton = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensor-parallel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensorcircuit-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensordict = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensordict-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensorizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensorrt-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntexify = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntext2text = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntextattack = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntfkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthepipe-api = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthinc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthingsvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthirdai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthop = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntianshou = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntidy3d = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntimesfm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntimm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntipo-kgen = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntmnt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntoad = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntomesd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntop2vec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-audiomentations = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-dct = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-delaunay = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-directml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-ema = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-encoding = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-fidelity = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-geometric = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-geopooling = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-harmonics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-kmeans = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-lr-finder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-max-mem = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-npu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-optimi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-optimizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-ort = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-pitch-shift = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-ppr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-pruning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-snippets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-stoi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-struct = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-tensorrt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchani = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchattacks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchaudio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchbiggraph = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchcam = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchcde = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchcfm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchcrepe = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchdata = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchdatasets-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchdiffeq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchdyn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchestra = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorcheval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorcheval-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchextractor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchfcpe = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchfun = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchfunc-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchgeo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchgeometry = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchjpeg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchlayers-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchmeta = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchmetrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchmocks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchpack = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchpippy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchpq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchprofile = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchquantlib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrec-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrec-nightly-cpu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrl-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchscale = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchsde = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchseg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchserve = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchserve-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchsnapshot-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchsr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchstain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchsummaryX = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchtext = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchtnt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchtnt-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchtyping = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchutil = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchvinecopulib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchviz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchx-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchxrayvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntotalspineseg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntracebloc-package-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntrainer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformer-engine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformer-lens = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformer-smaller-training-vocab = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformers-domain-adaptation = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransfusion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransparent-background = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntreescope = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntrolo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntsai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntslearn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nttspod = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntxtai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntyro = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nu8darts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nuhg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nuitestrunner-syberos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nultimate-rvc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nultralytics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nultralytics-thop = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunav = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunbabel-comet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunderthesea = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunfoldNd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunimernet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunitorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunitxt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunsloth = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunsloth-zoo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunstructured = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunstructured-inference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nutilsd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nv-diffusion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvIQA = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvectice = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvector-quantize-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvectorhub-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nversatile-audio-upscaler = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvertexai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvesin = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvgg-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvideo-representations-extractor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nviser = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvision-datasets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvisionmetrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvisu3d = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvit-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nviturka-nn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvllm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvllm-flash-attn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvocos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvollseg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwavmark = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwdoc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwhisper-live = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwhisper-timestamped = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwhisperx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwilds = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwordllama = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nworker-automate-hub = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwxbtool = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nx-clip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nx-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxaitk_saliency = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxgrammar = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxinference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxtts-api-server = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nyolo-poser = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nyolov5 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nyolov7-package = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nyta-general-utils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nzensvi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nzetascale = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nzuko = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n","size_bytes":90986},"replit.md":{"content":"# Overview\n\nCashOnDay is an AI-powered stock prediction and paper trading web application built with Flask. The platform combines machine learning-based stock price prediction with virtual trading capabilities, allowing users to practice trading strategies using simulated money. The application features real-time market simulation, news sentiment analysis, price alerts, and Telegram integration for notifications.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: Flask with Jinja2 templating engine\n- **UI Components**: Bootstrap 5 for responsive design with custom CSS styling\n- **Real-time Communication**: Socket.IO for WebSocket connections enabling live price updates and notifications\n- **Charting**: Chart.js and Plotly for interactive financial charts and data visualization\n- **Icons**: Feather Icons for consistent iconography\n- **Theme System**: Light/dark theme support with CSS custom properties\n\n## Backend Architecture\n- **Web Framework**: Flask with modular design pattern\n- **Authentication**: Session-based authentication with bcrypt password hashing\n- **Real-time Features**: Flask-SocketIO for WebSocket support\n- **Stock Data Simulation**: Custom StockSimulator class that generates realistic price movements using geometric Brownian motion\n- **Trading Engine**: PaperTradingEngine for virtual trading operations\n- **AI Prediction Engine**: StockPredictor using RandomForest and technical indicators\n- **News Analysis**: Sentiment analysis using HuggingFace Transformers (DistilBERT)\n\n## Data Storage\n- **Database**: PostgreSQL with SQLAlchemy ORM\n- **Models**: Comprehensive user management, portfolio tracking, trading history, alerts, and settings\n- **Session Management**: Flask sessions for user state persistence\n- **Connection Pooling**: SQLAlchemy with pool recycling and pre-ping for reliability\n\n## Core Features\n- **AI Stock Prediction**: Machine learning models with technical indicators (SMA, RSI, MACD, volatility measures)\n- **Paper Trading**: Virtual trading platform with real-time portfolio tracking\n- **Price Alerts**: Customizable price monitoring with notification system\n- **News Sentiment Analysis**: AI-powered news analysis for market insights\n- **User Management**: Complete authentication system with password reset functionality\n\n## Security & Authentication\n- **Password Security**: Bcrypt hashing with salt\n- **Session Management**: Secure session handling with configurable secrets\n- **Input Validation**: Form validation and CSRF protection\n- **Password Reset**: Token-based password recovery system\n\n# External Dependencies\n\n## Third-party Services\n- **Telegram Bot API**: For delivering trading alerts and notifications to users\n- **Yahoo Finance (yfinance)**: Stock data retrieval (with fallback to simulated data)\n- **News APIs**: External news sources for sentiment analysis (with demo data fallback)\n\n## Machine Learning & AI\n- **Scikit-learn**: RandomForest and LinearRegression models for price prediction\n- **HuggingFace Transformers**: DistilBERT model for news sentiment analysis\n- **NumPy & Pandas**: Data manipulation and numerical computations\n\n## Infrastructure\n- **PostgreSQL**: Primary database for user data and trading records\n- **SMTP Email Service**: Password reset and notification emails\n- **WebSocket Support**: Real-time communication for live updates\n\n## Key Libraries\n- **Flask Ecosystem**: Flask-SQLAlchemy, Flask-SocketIO, Flask-Bcrypt\n- **Data Processing**: pandas, numpy for financial calculations\n- **Visualization**: plotly, chart.js for interactive charts\n- **Security**: werkzeug for password utilities and proxy handling\n\nThe application is designed with graceful degradation - it can operate with demo data when external APIs are unavailable, ensuring consistent functionality regardless of external service availability.","size_bytes":3910},"stock_simulator.py":{"content":"import random\nimport time\nimport math\nfrom datetime import datetime\n\nclass StockSimulator:\n    def __init__(self):\n        # Initialize with popular stocks and their base prices\n        self.stocks = {\n            'AAPL': {'price': 175.00, 'base_price': 175.00, 'volatility': 0.02},\n            'GOOGL': {'price': 135.00, 'base_price': 135.00, 'volatility': 0.025},\n            'MSFT': {'price': 340.00, 'base_price': 340.00, 'volatility': 0.02},\n            'AMZN': {'price': 145.00, 'base_price': 145.00, 'volatility': 0.03},\n            'TSLA': {'price': 240.00, 'base_price': 240.00, 'volatility': 0.05},\n            'NVDA': {'price': 450.00, 'base_price': 450.00, 'volatility': 0.04},\n            'META': {'price': 320.00, 'base_price': 320.00, 'volatility': 0.035},\n            'NFLX': {'price': 420.00, 'base_price': 420.00, 'volatility': 0.03},\n            'ADBE': {'price': 530.00, 'base_price': 530.00, 'volatility': 0.025},\n            'CRM': {'price': 210.00, 'base_price': 210.00, 'volatility': 0.03}\n        }\n        \n        # Store price history for charts\n        self.price_history = {}\n        for symbol in self.stocks:\n            self.price_history[symbol] = []\n        \n        self.last_update = time.time()\n    \n    def update_prices(self):\n        \"\"\"Update stock prices with realistic movements\"\"\"\n        current_time = time.time()\n        \n        # Market hours simulation (more volatility during trading hours)\n        now = datetime.now()\n        hour = now.hour\n        \n        # Simulate market hours (9:30 AM - 4:00 PM EST)\n        market_open = 9.5 <= hour <= 16\n        volatility_multiplier = 1.0 if market_open else 0.3\n        \n        for symbol, data in self.stocks.items():\n            # Generate price movement using geometric Brownian motion\n            dt = 1.0 / 3600  # 1 second time step in hours\n            volatility = data['volatility'] * volatility_multiplier\n            \n            # Random walk with mean reversion\n            random_component = random.gauss(0, 1)\n            \n            # Mean reversion factor (tendency to return to base price)\n            mean_reversion = 0.001 * (data['base_price'] - data['price']) / data['base_price']\n            \n            # Market trend factor (small upward bias)\n            trend = 0.0001\n            \n            # Calculate price change\n            price_change = data['price'] * (\n                (trend + mean_reversion) * dt + \n                volatility * math.sqrt(dt) * random_component\n            )\n            \n            # Update price\n            new_price = data['price'] + price_change\n            \n            # Ensure price doesn't go negative or too extreme\n            min_price = data['base_price'] * 0.5\n            max_price = data['base_price'] * 2.0\n            new_price = max(min_price, min(max_price, new_price))\n            \n            data['price'] = round(new_price, 2)\n            \n            # Store price history (keep last 100 points)\n            timestamp = int(current_time * 1000)\n            self.price_history[symbol].append({\n                'timestamp': timestamp,\n                'price': data['price']\n            })\n            \n            # Keep only last 100 data points\n            if len(self.price_history[symbol]) > 100:\n                self.price_history[symbol].pop(0)\n        \n        self.last_update = current_time\n    \n    def get_price(self, symbol):\n        \"\"\"Get current price for a symbol\"\"\"\n        return self.stocks.get(symbol, {}).get('price', 0.0)\n    \n    def get_all_prices(self):\n        \"\"\"Get all current prices\"\"\"\n        return {\n            symbol: {\n                'price': data['price'],\n                'change': round(data['price'] - data['base_price'], 2),\n                'change_percent': round(((data['price'] - data['base_price']) / data['base_price']) * 100, 2),\n                'history': self.price_history.get(symbol, [])\n            }\n            for symbol, data in self.stocks.items()\n        }\n    \n    def get_price_history(self, symbol, limit=50):\n        \"\"\"Get price history for a symbol\"\"\"\n        return self.price_history.get(symbol, [])[-limit:]\n","size_bytes":4159},"telegram_bot.py":{"content":"import os\nimport logging\nfrom telegram import Bot\nfrom telegram.error import TelegramError\n\nclass TelegramBotHandler:\n    def __init__(self):\n        self.bot_token = os.getenv(\"TELEGRAM_TOKEN\")\n        self.bot = None\n        \n        if self.bot_token:\n            try:\n                self.bot = Bot(token=self.bot_token)\n                logging.info(\"Telegram bot initialized successfully\")\n            except Exception as e:\n                logging.error(f\"Failed to initialize Telegram bot: {e}\")\n        else:\n            logging.warning(\"TELEGRAM_TOKEN not found in environment variables\")\n    \n    def send_alert(self, chat_id, message):\n        \"\"\"Send alert message to specified chat\"\"\"\n        if not self.bot or not chat_id:\n            logging.warning(\"Telegram bot or chat_id not available\")\n            return False\n            \n        try:\n            self.bot.send_message(chat_id=chat_id, text=message)\n            logging.info(f\"Alert sent to {chat_id}: {message}\")\n            return True\n        except TelegramError as e:\n            logging.error(f\"Failed to send Telegram message: {e}\")\n            return False\n    \n    def send_price_alert(self, chat_id, symbol, current_price, condition):\n        \"\"\"Send formatted price alert\"\"\"\n        message = f\"🚨 Price Alert Triggered!\\n\\n\"\n        message += f\"Symbol: {symbol}\\n\"\n        message += f\"Current Price: ${current_price:.2f}\\n\"\n        message += f\"Condition: {condition}\\n\"\n        message += f\"Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}\"\n        \n        return self.send_alert(chat_id, message)\n    \n    def send_trade_notification(self, chat_id, trade_info):\n        \"\"\"Send trade execution notification\"\"\"\n        message = f\"✅ Trade Executed!\\n\\n\"\n        message += f\"Action: {trade_info['side']}\\n\"\n        message += f\"Symbol: {trade_info['symbol']}\\n\"\n        message += f\"Quantity: {trade_info['quantity']}\\n\"\n        message += f\"Price: ${trade_info['price']:.2f}\\n\"\n        message += f\"Total: ${trade_info['total_amount']:.2f}\\n\"\n        message += f\"Time: {trade_info['executed_at']}\"\n        \n        return self.send_alert(chat_id, message)\n    \n    def verify_chat_id(self, chat_id):\n        \"\"\"Verify if chat_id is valid\"\"\"\n        if not self.bot:\n            return False\n            \n        try:\n            self.bot.send_message(chat_id=chat_id, text=\"✅ Chat ID verified successfully!\")\n            return True\n        except TelegramError:\n            return False\n","size_bytes":2493},"attached_assets/README_1756656822879.md":{"content":"# CashONday – AI Stock Prediction & Paper Trading App\r\n\r\n## Features\r\n- Flask backend with PostgreSQL\r\n- Login/Register/Profile (hashed passwords)\r\n- XAI-based stock prediction (RandomForest + SHAP)\r\n- Paper trading with dummy balance\r\n- Live market news sentiment (HuggingFace Transformers)\r\n- Telegram alerts for trades\r\n- Dark theme UI with responsive design\r\n\r\n## Setup\r\n1. Clone repo\r\n2. Install dependencies:  \r\n   ```bash\r\n   pip install -r requirements.txt\r\n","size_bytes":468},"attached_assets/app_1756656822872.py":{"content":"import os\r\nimport re\r\nimport time\r\nimport json\r\nimport random\r\nimport logging\r\nimport threading\r\nimport datetime\r\nimport numpy as np\r\nimport pandas as pd\r\nimport yfinance as yf\r\nimport plotly.graph_objs as go\r\n\r\nfrom flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify\r\nfrom flask_bcrypt import Bcrypt\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\r\nfrom werkzeug.middleware.proxy_fix import ProxyFix\r\nfrom dotenv import load_dotenv\r\nfrom telegram import Bot\r\nfrom sqlalchemy.orm import DeclarativeBase\r\n\r\n# Local imports\r\nfrom models import User, Portfolio, Trade, Position, Alert, db,Transaction\r\nfrom news import analyze_news\r\nfrom prediction import StockPredictor\r\nfrom paper_trading import PaperTradingEngine\r\nfrom stock_simulator import StockSimulator\r\n\r\n# ------------------ CONFIG ------------------\r\nload_dotenv()\r\nlogging.basicConfig(level=logging.DEBUG)\r\n\r\nclass Base(DeclarativeBase):\r\n    pass\r\n\r\napp = Flask(__name__)\r\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"supersecret\")\r\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\r\n\r\n# Database\r\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\r\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\"pool_recycle\": 300, \"pool_pre_ping\": True}\r\ndb.init_app(app)\r\n\r\n# Extensions\r\nbcrypt = Bcrypt(app)\r\nsocketio = SocketIO(app, cors_allowed_origins=\"*\", async_mode='threading')\r\ntelegram_bot = Bot(token=os.getenv(\"TELEGRAM_TOKEN\"))\r\n\r\n# Trading engines\r\ntrading_engine = PaperTradingEngine(db)\r\nstock_simulator = StockSimulator()\r\npredictor = StockPredictor()\r\n\r\n# ------------------ HELPERS ------------------\r\ndef send_telegram_alert(message):\r\n    try:\r\n        if os.getenv(\"TELEGRAM_CHAT_ID\"):\r\n            telegram_bot.send_message(chat_id=os.getenv(\"TELEGRAM_CHAT_ID\"), text=message)\r\n    except Exception as e:\r\n        logging.error(f\"Telegram alert failed: {e}\")\r\n\r\ndef calculate_rsi(prices, window=14):\r\n    delta = prices.diff()\r\n    gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()\r\n    loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()\r\n    rs = gain / loss\r\n    rsi = 100 - (100 / (1 + rs))\r\n    return rsi\r\n\r\ndef check_alerts():\r\n    alerts = Alert.query.filter_by(status=\"Active\").all()\r\n    for alert in alerts:\r\n        try:\r\n            match = re.match(r\"Price\\s*([<>]=?|==)\\s*(\\d+\\.?\\d*)\", alert.condition)\r\n            if not match:\r\n                continue\r\n            operator, value = match.groups()\r\n            value = float(value)\r\n\r\n            data = yf.Ticker(alert.symbol).history(period=\"1d\")\r\n            if data.empty:\r\n                continue\r\n            current_price = float(data['Close'].iloc[-1])\r\n\r\n            if eval(f\"{current_price} {operator} {value}\"):\r\n                user = User.query.get(alert.user_id)\r\n                if user and user.alerts_enabled:\r\n                    send_telegram_alert(f\"Alert Triggered: {alert.symbol} {alert.condition} (Current: {current_price})\")\r\n                alert.status = \"Triggered\"\r\n                db.session.commit()\r\n        except Exception as e:\r\n            logging.error(f\"Error checking alert: {e}\")\r\n\r\n# ------------------ AUTH ------------------\r\n@app.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n    if request.method == 'POST':\r\n        username, password = request.form['username'], request.form['password']\r\n        user = User.query.filter_by(username=username).first()\r\n        if user and bcrypt.check_password_hash(user.password, password):\r\n            session['user_id'] = user.id\r\n            flash(\"Welcome back!\", \"success\")\r\n            return redirect(url_for('dashboard'))\r\n        flash(\"Invalid credentials.\", \"danger\")\r\n    return render_template('login.html')\r\n\r\n@app.route('/register', methods=['GET', 'POST'])\r\ndef register():\r\n    if request.method == 'POST':\r\n        username = request.form['username']\r\n        password = bcrypt.generate_password_hash(request.form['password']).decode('utf-8')\r\n        if User.query.filter_by(username=username).first():\r\n            flash(\"Username already exists.\", \"danger\")\r\n            return redirect(url_for('register'))\r\n        db.session.add(User(username=username, password=password))\r\n        db.session.commit()\r\n        flash(\"Registration successful. Please log in.\", \"success\")\r\n        return redirect(url_for('login'))\r\n    return render_template('register.html')\r\n@app.route(\"/profile\",methods=['GET', 'POST'])\r\ndef profile():\r\n    if \"user_id\" not in session:\r\n        return redirect(url_for(\"login\"))   # redirect if not logged in\r\n\r\n    user = User.query.get(session[\"user_id\"])\r\n    transactions = Transaction.query.filter_by(user_id=user.id).order_by(Transaction.timestamp.desc()).all()\r\n\r\n    return render_template(\"profile.html\", user=user, transactions=transactions)\r\n\r\n\r\n@app.route('/logout')\r\ndef logout():\r\n    session.clear()\r\n    flash(\"You have been logged out.\", \"info\")\r\n    return redirect(url_for('login'))\r\n\r\n# ------------------ DASHBOARD ------------------\r\n@app.route('/')\r\ndef home():\r\n    return redirect(url_for('dashboard')) if 'user_id' in session else redirect(url_for('login'))\r\n\r\n@app.route('/dashboard')\r\ndef dashboard():\r\n    if 'user_id' not in session: \r\n        return redirect(url_for('login'))\r\n    user = User.query.get(session['user_id'])\r\n    watchlist_symbols = [\"AAPL\", \"TSLA\", \"MSFT\", \"GOOGL\", \"AMZN\", \"META\"]\r\n    watchlist = []\r\n    for sym in watchlist_symbols:\r\n        data = yf.Ticker(sym).history(period=\"2d\")\r\n        if not data.empty:\r\n            price = round(data['Close'].iloc[-1], 2)\r\n            prev = round(data['Close'].iloc[-2], 2) if len(data) > 1 else price\r\n            change = round(((price - prev) / prev) * 100, 2)\r\n            watchlist.append({\"symbol\": sym, \"price\": price, \"change\": change})\r\n    return render_template('dashboard.html', user=user, watchlist=watchlist)\r\n\r\n# ------------------ PREDICTION ------------------\r\npredictor = StockPredictor()\r\n\r\n@app.route('/predict',methods=['GET', 'POST'])\r\ndef predict():\r\n    \"\"\"Main page with stock prediction interface\"\"\"\r\n    return render_template('prediction.html')\r\n\r\ndef get_stock_symbol_variations(symbol):\r\n    \"\"\"Get different stock symbol variations for international exchanges\"\"\"\r\n    symbol = symbol.upper().strip()\r\n    \r\n    # Common stock symbol mappings for international companies\r\n    # Using verified symbols that work in Yahoo Finance\r\n    symbol_mappings = {\r\n        # Indian Companies (ADRs available in US markets)\r\n        'TCS': ['INFY', 'TCS.NS'],  # Using Infosys ADR as TCS is not available as ADR\r\n        'TATA': ['TTM', 'TATAMOTORS.NS'],  # Tata Motors ADR\r\n        'RELIANCE': ['RELIANCE.NS'],  # No ADR, only Indian exchange\r\n        'INFOSYS': ['INFY', 'INFY.NS'],  # Infosys ADR\r\n        'WIPRO': ['WIT', 'WIPRO.NS'],  # Wipro ADR\r\n        'HDFC': ['HDB', 'HDFCBANK.NS'],  # HDFC Bank ADR\r\n        'ICICI': ['IBN', 'ICICIBANK.NS'],  # ICICI Bank ADR\r\n        'ITC': ['ITC.NS'],  # Only on Indian exchanges\r\n        'SBI': ['SBIN.NS'],  # Only on Indian exchanges\r\n        'LT': ['LT.NS'],  # Larsen & Toubro\r\n        'MARUTI': ['MARUTI.NS'],  # Maruti Suzuki\r\n        'BAJAJ': ['BAJFINANCE.NS'],  # Bajaj Finance\r\n        'ASIAN': ['ASIANPAINT.NS'],  # Asian Paints\r\n        \r\n        # Global Companies\r\n        'SAMSUNG': ['005930.KS'],  # Samsung Electronics (Korea)\r\n        'MICROSOFT': ['MSFT'],  # Microsoft\r\n        'XOM': ['XOM'],  # ExxonMobil\r\n        'BABA': ['BABA'],  # Alibaba ADR\r\n        'TSM': ['TSM'],  # Taiwan Semiconductor ADR\r\n        'TOYOTA': ['TM'],  # Toyota ADR\r\n        'NESTLE': ['NSRGY'],  # Nestle ADR\r\n        'UNILEVER': ['UL'],  # Unilever ADR\r\n        'ROCHE': ['RHHBY'],  # Roche ADR\r\n        'NOVARTIS': ['NVS'],  # Novartis ADR\r\n        'SAP': ['SAP'],  # SAP\r\n        'ASML': ['ASML'],  # ASML\r\n        'SHELL': ['SHEL'],  # Shell\r\n        'BP': ['BP'],  # BP\r\n        'VODAFONE': ['VOD'],  # Vodafone\r\n        \r\n        # Additional popular companies\r\n        'APPLE': ['AAPL'],\r\n        'GOOGLE': ['GOOGL', 'GOOG'],\r\n        'AMAZON': ['AMZN'],\r\n        'TESLA': ['TSLA'],\r\n        'META': ['META'],\r\n        'NVIDIA': ['NVDA'],\r\n        'NETFLIX': ['NFLX'],\r\n        'ADOBE': ['ADBE'],\r\n        'SALESFORCE': ['CRM'],\r\n        'INTEL': ['INTC'],\r\n        'AMD': ['AMD'],\r\n        'ORACLE': ['ORCL'],\r\n        'IBM': ['IBM'],\r\n        'CISCO': ['CSCO'],\r\n        'PAYPAL': ['PYPL'],\r\n        'VISA': ['V'],\r\n        'MASTERCARD': ['MA'],\r\n        'JPMORGAN': ['JPM'],\r\n        'BERKSHIRE': ['BRK-B', 'BRK-A'],\r\n        'COCA': ['KO'],\r\n        'DISNEY': ['DIS'],\r\n        'WALMART': ['WMT'],\r\n        'JOHNSON': ['JNJ'],\r\n        'PROCTER': ['PG']\r\n    }\r\n    \r\n    # If symbol is in mappings, return all variations\r\n    if symbol in symbol_mappings:\r\n        return symbol_mappings[symbol]\r\n    \r\n    # For other symbols, try common exchange suffixes\r\n    variations = [symbol]\r\n    \r\n    # Add common exchange suffixes if not already present\r\n    if '.' not in symbol:\r\n        variations.extend([\r\n            f\"{symbol}.NS\",  # NSE India\r\n            f\"{symbol}.BO\",  # BSE India\r\n            f\"{symbol}.L\",   # London\r\n            f\"{symbol}.DE\",  # Germany\r\n            f\"{symbol}.PA\",  # Paris\r\n            f\"{symbol}.TO\",  # Toronto\r\n            f\"{symbol}.AS\",  # Amsterdam\r\n            f\"{symbol}.SW\",  # Switzerland\r\n            f\"{symbol}.HK\",  # Hong Kong\r\n            f\"{symbol}.T\",   # Tokyo\r\n            f\"{symbol}.KS\"   # Korea\r\n        ])\r\n    \r\n    return variations\r\n\r\n@app.route('/api/stock-data/<symbol>')\r\ndef get_stock_data(symbol):\r\n    \"\"\"Fetch real-time stock data for a given symbol\"\"\"\r\n    try:\r\n        # Validate symbol\r\n        if not symbol or len(symbol) > 20:  # Increased length for exchange suffixes\r\n            return jsonify({'error': 'Invalid stock symbol'}), 400\r\n        \r\n        symbol = symbol.upper().strip()\r\n        \r\n        # Get symbol variations to try\r\n        symbol_variations = get_stock_symbol_variations(symbol)\r\n        \r\n        stock_data = None\r\n        working_symbol = None\r\n        \r\n        # Try each symbol variation until we find one that works\r\n        for try_symbol in symbol_variations:\r\n            try:\r\n                stock = yf.Ticker(try_symbol)\r\n                hist = stock.history(period=\"1y\")\r\n                \r\n                if not hist.empty and len(hist) > 10:  # Ensure we have enough data\r\n                    stock_data = stock\r\n                    working_symbol = try_symbol\r\n                    break\r\n                    \r\n            except Exception as e:\r\n                logging.debug(f\"Failed to fetch data for {try_symbol}: {str(e)}\")\r\n                continue\r\n        \r\n        if stock_data is None:\r\n            return jsonify({'error': f'No data found for {symbol}. Please check the symbol or try the full exchange symbol (e.g., TCS.NS for Indian stocks)'}), 404\r\n        \r\n        # Use the working symbol for the rest of the function\r\n        symbol = working_symbol\r\n        stock = stock_data\r\n        \r\n        # Get historical data (1 year) - we already fetched this above\r\n        hist = stock.history(period=\"1y\")\r\n        \r\n        if hist.empty:\r\n            return jsonify({'error': f'No data found for symbol {symbol}'}), 404\r\n        \r\n        # Get current stock info\r\n        info = stock.info\r\n        \r\n        # Prepare chart data\r\n        chart_data = []\r\n        for date, row in hist.iterrows():\r\n            chart_data.append({\r\n                'x': date.strftime('%Y-%m-%d'),\r\n                'open': round(float(row['Open']), 2),\r\n                'high': round(float(row['High']), 2),\r\n                'low': round(float(row['Low']), 2),\r\n                'close': round(float(row['Close']), 2),\r\n                'volume': int(row['Volume'])\r\n            })\r\n        \r\n        # Get current price\r\n        current_price = round(float(hist['Close'].iloc[-1]), 2)\r\n        prev_close = round(float(hist['Close'].iloc[-2]), 2)\r\n        price_change = round(current_price - prev_close, 2)\r\n        price_change_percent = round((price_change / prev_close) * 100, 2)\r\n        \r\n        # Calculate basic technical indicators\r\n        hist['SMA_20'] = hist['Close'].rolling(window=20).mean()\r\n        hist['SMA_50'] = hist['Close'].rolling(window=50).mean()\r\n        hist['RSI'] = calculate_rsi(hist['Close'])\r\n        \r\n        # Prepare response\r\n        response_data = {\r\n            'symbol': symbol,\r\n            'company_name': info.get('longName', symbol),\r\n            'current_price': current_price,\r\n            'price_change': price_change,\r\n            'price_change_percent': price_change_percent,\r\n            'chart_data': chart_data,\r\n            'technical_indicators': {\r\n                'sma_20': round(float(hist['SMA_20'].iloc[-1]), 2) if not pd.isna(hist['SMA_20'].iloc[-1]) else None,\r\n                'sma_50': round(float(hist['SMA_50'].iloc[-1]), 2) if not pd.isna(hist['SMA_50'].iloc[-1]) else None,\r\n                'rsi': round(float(hist['RSI'].iloc[-1]), 2) if not pd.isna(hist['RSI'].iloc[-1]) else None,\r\n                'volume': int(hist['Volume'].iloc[-1])\r\n            },\r\n            'market_cap': info.get('marketCap'),\r\n            'pe_ratio': info.get('trailingPE'),\r\n            'dividend_yield': info.get('dividendYield')\r\n        }\r\n        \r\n        return jsonify(response_data)\r\n        \r\n    except Exception as e:\r\n        logging.error(f\"Error fetching stock data for {symbol}: {str(e)}\")\r\n        return jsonify({'error': f'Failed to fetch data for {symbol}. Please check the symbol and try again.'}), 500\r\n\r\n@app.route('/api/predict/<symbol>')\r\ndef predict_stock(symbol):\r\n    \"\"\"Generate AI prediction for a stock symbol\"\"\"\r\n    try:\r\n        symbol = symbol.upper().strip()\r\n        \r\n        # Get symbol variations and find working symbol\r\n        symbol_variations = get_stock_symbol_variations(symbol)\r\n        working_symbol = None\r\n        \r\n        for try_symbol in symbol_variations:\r\n            try:\r\n                stock = yf.Ticker(try_symbol)\r\n                hist = stock.history(period=\"2y\")  # More data for better prediction\r\n                \r\n                if not hist.empty and len(hist) > 50:  # Need enough data for prediction\r\n                    working_symbol = try_symbol\r\n                    break\r\n                    \r\n            except Exception as e:\r\n                logging.debug(f\"Failed to fetch prediction data for {try_symbol}: {str(e)}\")\r\n                continue\r\n        \r\n        if working_symbol is None:\r\n            return jsonify({'error': f'Insufficient data for prediction. Please check the symbol.'}), 404\r\n        \r\n        # Use the working symbol\r\n        stock = yf.Ticker(working_symbol)\r\n        hist = stock.history(period=\"2y\")\r\n        \r\n        # Generate prediction\r\n        prediction_result = predictor.predict(hist)\r\n        \r\n        if prediction_result is None:\r\n            return jsonify({'error': 'Unable to generate prediction. Insufficient data.'}), 400\r\n        \r\n        return jsonify(prediction_result)\r\n        \r\n    except Exception as e:\r\n        logging.error(f\"Error generating prediction for {symbol}: {str(e)}\")\r\n        return jsonify({'error': f'Failed to generate prediction for {symbol}'}), 500\r\n\r\n@app.route('/api/supported-companies')\r\ndef get_supported_companies():\r\n    \"\"\"Get list of supported company symbols\"\"\"\r\n    symbol_mappings = {\r\n        # Indian Companies (ADRs available in US markets)\r\n        'TCS': 'Tata Consultancy Services (use INFY for ADR)',\r\n        'TATA': 'Tata Motors (use TTM)',\r\n        'RELIANCE': 'Reliance Industries (RELIANCE.NS)',\r\n        'INFOSYS': 'Infosys (use INFY)',\r\n        'WIPRO': 'Wipro (use WIT)',\r\n        'HDFC': 'HDFC Bank (use HDB)',\r\n        'ICICI': 'ICICI Bank (use IBN)',\r\n        \r\n        # Global Companies\r\n        'MICROSOFT': 'Microsoft (use MSFT)',\r\n        'APPLE': 'Apple (use AAPL)',\r\n        'GOOGLE': 'Google/Alphabet (use GOOGL)',\r\n        'AMAZON': 'Amazon (use AMZN)',\r\n        'TESLA': 'Tesla (use TSLA)',\r\n        'META': 'Meta/Facebook (use META)',\r\n        'NVIDIA': 'NVIDIA (use NVDA)',\r\n        'SAMSUNG': 'Samsung Electronics (use 005930.KS)',\r\n        'TOYOTA': 'Toyota (use TM)',\r\n        'XOM': 'ExxonMobil (use XOM)',\r\n        'NETFLIX': 'Netflix (use NFLX)',\r\n        'ADOBE': 'Adobe (use ADBE)',\r\n        'ORACLE': 'Oracle (use ORCL)',\r\n        'IBM': 'IBM (use IBM)',\r\n        'INTEL': 'Intel (use INTC)',\r\n        'AMD': 'AMD (use AMD)',\r\n        'VISA': 'Visa (use V)',\r\n        'MASTERCARD': 'Mastercard (use MA)',\r\n        'DISNEY': 'Disney (use DIS)',\r\n        'COCA': 'Coca-Cola (use KO)',\r\n        'WALMART': 'Walmart (use WMT)'\r\n    }\r\n    \r\n    return jsonify({\r\n        'supported_companies': symbol_mappings,\r\n        'note': 'For Indian companies, you can also try adding .NS (NSE) suffix to the company name'\r\n    })\r\n\r\ndef calculate_rsi(prices, window=14):\r\n    \"\"\"Calculate Relative Strength Index\"\"\"\r\n    delta = prices.diff()\r\n    gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()\r\n    loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()\r\n    rs = gain / loss\r\n    rsi = 100 - (100 / (1 + rs))\r\n    return rsi\r\n\r\n\r\n# ------------------ PAPER TRADING ------------------\r\n@app.route('/paper-trade')\r\ndef paper_trade():\r\n    return render_template('paper_trade.html')\r\n\r\n@app.route('/api/portfolio')\r\ndef get_portfolio():\r\n    return jsonify(trading_engine.get_portfolio(1))\r\n\r\n@app.route('/api/positions')\r\ndef get_positions():\r\n    return jsonify(trading_engine.get_positions(1))\r\n\r\n@app.route('/api/trades')\r\ndef get_trades():\r\n    return jsonify(trading_engine.get_trade_history(1))\r\n\r\n@app.route('/api/place_order', methods=['POST'])\r\ndef place_order():\r\n    data = request.json\r\n    if not data:\r\n        return jsonify({'error': 'No data provided'}), 400\r\n    result = trading_engine.place_order(\r\n        user_id=1,\r\n        symbol=data.get('symbol'),\r\n        side=data.get('side'),\r\n        quantity=data.get('quantity'),\r\n        price=data.get('price')\r\n    )\r\n    return jsonify(result)\r\n\r\n# ------------------ SOCKET.IO ------------------\r\n@socketio.on('connect')\r\ndef handle_connect():\r\n    join_room('market_data')\r\n    emit('market_update', stock_simulator.get_all_prices())\r\n\r\n@socketio.on('disconnect')\r\ndef handle_disconnect():\r\n    leave_room('market_data')\r\n\r\ndef broadcast_market_updates():\r\n    while True:\r\n        time.sleep(1)\r\n        stock_simulator.update_prices()\r\n        socketio.emit('market_update', stock_simulator.get_all_prices(), to='market_data')\r\n\r\n# ------------------ NEWS ------------------\r\n@app.route('/news')\r\ndef news_home():\r\n    return render_template('news.html', symbol=None, news_data=None)\r\n\r\n@app.route('/news/<symbol>')\r\ndef news_analysis(symbol):\r\n    try:\r\n        news_data = analyze_news(symbol.upper())\r\n        return render_template('news.html', symbol=symbol.upper(), news_data=news_data)\r\n    except Exception as e:\r\n        logging.error(f\"News error: {e}\")\r\n        return render_template('news.html', symbol=symbol.upper(), news_data=None, error=str(e))\r\n\r\n@app.route('/api/news/<symbol>')\r\ndef api_news(symbol):\r\n    try:\r\n        return jsonify(analyze_news(symbol.upper()))\r\n    except Exception as e:\r\n        return jsonify({\"error\": str(e)}), 500\r\n\r\n# ------------------ SETTINGS & ALERTS ------------------\r\n@app.route('/settings', methods=['GET', 'POST'])\r\ndef settings():\r\n    if 'user_id' not in session:\r\n        return redirect(url_for('login'))\r\n    user = User.query.get(session['user_id'])\r\n    if request.method == 'POST':\r\n        if request.form.get('password'):\r\n            user.password = bcrypt.generate_password_hash(request.form['password']).decode('utf-8')\r\n        user.alerts_enabled = bool(request.form.get('alerts'))\r\n        if request.form.get('balance'):\r\n            user.balance = float(request.form['balance'])\r\n        if 'test_alert' in request.form and user.alerts_enabled:\r\n            send_telegram_alert(\"Test Alert: Telegram is working!\")\r\n        db.session.commit()\r\n        flash(\"Settings updated!\", \"success\")\r\n    return render_template('settings.html', user=user)\r\n\r\n@app.route('/alerts', methods=['GET', 'POST'])\r\ndef alerts_page():\r\n    if 'user_id' not in session:\r\n        return redirect(url_for('login'))\r\n    user_id = session['user_id']\r\n    if request.method == 'POST':\r\n        symbol = request.form.get('symbol').upper()\r\n        condition = request.form.get('condition')\r\n        if symbol and condition:\r\n            new_alert = Alert(user_id=user_id, symbol=symbol, condition=condition, status=\"Active\")\r\n            db.session.add(new_alert)\r\n            db.session.commit()\r\n            flash(f\"Alert created for {symbol}: {condition}\", \"success\")\r\n    alerts = Alert.query.filter_by(user_id=user_id).all()\r\n    return render_template('alerts.html', alerts=alerts)\r\n\r\n@app.route('/check_alerts')\r\ndef run_alerts():\r\n    check_alerts()\r\n    flash(\"Alerts checked!\", \"info\")\r\n    return redirect(url_for('alerts_page'))\r\n\r\n# ------------------ MAIN ------------------\r\ndef create_tables():\r\n    with app.app_context():\r\n        db.create_all()\r\n        if not Portfolio.query.filter_by(user_id=1).first():\r\n            portfolio = Portfolio(user_id=1, balance=100000.0, total_value=100000.0)\r\n            db.session.add(portfolio)\r\n            db.session.commit()\r\n\r\nif __name__ == '__main__':\r\n    create_tables()\r\n    market_thread = threading.Thread(target=broadcast_market_updates, daemon=True)\r\n    market_thread.start()\r\n    socketio.run(app, host='0.0.0.0', port=5000, debug=True)\r\n","size_bytes":21728},"attached_assets/models_1756656822873.py":{"content":"from flask_sqlalchemy import SQLAlchemy\r\n#from extensions import db\r\n\r\nfrom datetime import datetime\r\nfrom sqlalchemy import func\r\ndb = SQLAlchemy()\r\n\r\nclass User(db.Model):\r\n    __tablename__ = 'users'\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    username = db.Column(db.String(150), unique=True)\r\n    password = db.Column(db.String(150))\r\n    balance = db.Column(db.Float, default=100000.0)\r\n\r\n\r\nclass Transaction(db.Model):\r\n    __tablename__ = 'transactions'\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    user_id = db.Column(db.Integer)\r\n    stock_symbol = db.Column(db.String(10))\r\n    quantity = db.Column(db.Integer)\r\n    price = db.Column(db.Float)\r\n    action = db.Column(db.String(10))\r\n    timestamp = db.Column(db.DateTime)\r\n\r\nclass Prediction(db.Model):\r\n    __tablename__ = 'predictions'\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    stock_symbol = db.Column(db.String(10))\r\n    predicted_price = db.Column(db.Float)\r\n    shap_explanation = db.Column(db.Text)\r\n    created_at = db.Column(db.DateTime)\r\n\r\nclass News(db.Model):\r\n    __tablename__ = 'news'\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    headline = db.Column(db.Text)\r\n    sentiment = db.Column(db.String(20))\r\n    created_at = db.Column(db.DateTime)\r\nclass Alert(db.Model):\r\n    __tablename__ = 'alerts'\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    user_id = db.Column(db.Integer)\r\n    symbol = db.Column(db.String(20))\r\n    condition = db.Column(db.String(100))  # e.g., \"Price > 200\"\r\n    status = db.Column(db.String(20), default=\"Active\")\r\n\r\n\r\nclass Portfolio(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    user_id = db.Column(db.Integer, nullable=False)\r\n    balance = db.Column(db.Float, default=100000.0)  # Starting with $100,000\r\n    total_value = db.Column(db.Float, default=100000.0)\r\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\r\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\r\n\r\n    def to_dict(self):\r\n        return {\r\n            'id': self.id,\r\n            'user_id': self.user_id,\r\n            'balance': self.balance,\r\n            'total_value': self.total_value,\r\n            'created_at': self.created_at.isoformat() if self.created_at else None,\r\n            'updated_at': self.updated_at.isoformat() if self.updated_at else None\r\n        }\r\n\r\nclass Position(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    user_id = db.Column(db.Integer, nullable=False)\r\n    symbol = db.Column(db.String(10), nullable=False)\r\n    quantity = db.Column(db.Integer, nullable=False)\r\n    avg_price = db.Column(db.Float, nullable=False)\r\n    current_price = db.Column(db.Float, default=0.0)\r\n    market_value = db.Column(db.Float, default=0.0)\r\n    unrealized_pnl = db.Column(db.Float, default=0.0)\r\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\r\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\r\n\r\n    def to_dict(self):\r\n        return {\r\n            'id': self.id,\r\n            'user_id': self.user_id,\r\n            'symbol': self.symbol,\r\n            'quantity': self.quantity,\r\n            'avg_price': self.avg_price,\r\n            'current_price': self.current_price,\r\n            'market_value': self.market_value,\r\n            'unrealized_pnl': self.unrealized_pnl,\r\n            'created_at': self.created_at.isoformat() if self.created_at else None,\r\n            'updated_at': self.updated_at.isoformat() if self.updated_at else None\r\n        }\r\n\r\nclass Trade(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    user_id = db.Column(db.Integer, nullable=False)\r\n    symbol = db.Column(db.String(10), nullable=False)\r\n    side = db.Column(db.String(4), nullable=False)  # 'BUY' or 'SELL'\r\n    quantity = db.Column(db.Integer, nullable=False)\r\n    price = db.Column(db.Float, nullable=False)\r\n    total_amount = db.Column(db.Float, nullable=False)\r\n    commission = db.Column(db.Float, default=0.0)\r\n    status = db.Column(db.String(20), default='EXECUTED')\r\n    executed_at = db.Column(db.DateTime, default=datetime.utcnow)\r\n\r\n    def to_dict(self):\r\n        return {\r\n            'id': self.id,\r\n            'user_id': self.user_id,\r\n            'symbol': self.symbol,\r\n            'side': self.side,\r\n            'quantity': self.quantity,\r\n            'price': self.price,\r\n            'total_amount': self.total_amount,\r\n            'commission': self.commission,\r\n            'status': self.status,\r\n            'executed_at': self.executed_at.isoformat() if self.executed_at else None\r\n        }\r\n\r\n","size_bytes":4614},"attached_assets/news_1756656822874.py":{"content":"import os\r\nimport logging\r\nfrom datetime import datetime\r\nimport warnings\r\n\r\n# Optional imports - handle missing packages gracefully\r\ntry:\r\n    import requests\r\n    REQUESTS_AVAILABLE = True\r\nexcept ImportError:\r\n    logging.warning(\"requests not available - using demo data\")\r\n    REQUESTS_AVAILABLE = False\r\n\r\ntry:\r\n    import yfinance as yf\r\n    YFINANCE_AVAILABLE = True\r\nexcept ImportError:\r\n    logging.warning(\"yfinance not available - using demo data\")\r\n    YFINANCE_AVAILABLE = False\r\n\r\n# Suppress warnings from transformers\r\nwarnings.filterwarnings(\"ignore\")\r\n\r\n# Initialize sentiment analysis pipeline\r\nsentiment_analyzer = None\r\ntry:\r\n    from transformers import pipeline\r\n    sentiment_analyzer = pipeline(\r\n        \"sentiment-analysis\", \r\n        model=\"distilbert-base-uncased-finetuned-sst-2-english\",\r\n        return_all_scores=True\r\n    )\r\n    logging.info(\"Sentiment analysis model loaded successfully\")\r\nexcept ImportError:\r\n    logging.warning(\"Transformers not available, using fallback sentiment analysis\")\r\n    sentiment_analyzer = None\r\nexcept Exception as e:\r\n    logging.error(f\"Error loading sentiment model: {e}\")\r\n    sentiment_analyzer = None\r\n\r\ndef get_demo_news(symbol, limit=10):\r\n    \"\"\"Generate demo news data when APIs are not available\"\"\"\r\n    demo_articles = [\r\n        {\r\n            'title': f'{symbol} Reports Strong Q4 Earnings, Beats Expectations',\r\n            'description': f'{get_company_name(symbol)} announced impressive quarterly results with revenue growth exceeding analyst predictions.',\r\n            'url': 'https://example.com/news1',\r\n            'source': {'name': 'Demo Financial News'},\r\n            'publishedAt': datetime.now().isoformat() + 'Z'\r\n        },\r\n        {\r\n            'title': f'Analysts Upgrade {symbol} Stock Rating to Buy',\r\n            'description': f'Major investment firms raise price targets for {get_company_name(symbol)} citing strong fundamentals.',\r\n            'url': 'https://example.com/news2', \r\n            'source': {'name': 'Demo Market Watch'},\r\n            'publishedAt': datetime.now().isoformat() + 'Z'\r\n        },\r\n        {\r\n            'title': f'{symbol} Faces Regulatory Challenges in New Markets',\r\n            'description': f'{get_company_name(symbol)} encounters potential headwinds from regulatory scrutiny in emerging markets.',\r\n            'url': 'https://example.com/news3',\r\n            'source': {'name': 'Demo Business Weekly'},\r\n            'publishedAt': datetime.now().isoformat() + 'Z'\r\n        },\r\n        {\r\n            'title': f'Innovation Drive: {symbol} Launches New Product Line',\r\n            'description': f'{get_company_name(symbol)} unveils cutting-edge technology solutions to expand market reach.',\r\n            'url': 'https://example.com/news4',\r\n            'source': {'name': 'Demo Tech Today'},\r\n            'publishedAt': datetime.now().isoformat() + 'Z'\r\n        },\r\n        {\r\n            'title': f'{symbol} Stock Volatile Amid Market Uncertainty',\r\n            'description': f'Shares of {get_company_name(symbol)} experience fluctuations due to broader market conditions.',\r\n            'url': 'https://example.com/news5',\r\n            'source': {'name': 'Demo Markets Daily'},\r\n            'publishedAt': datetime.now().isoformat() + 'Z'\r\n        }\r\n    ]\r\n    return demo_articles[:limit]\r\n\r\ndef fetch_news_newsapi(symbol, limit=10):\r\n    \"\"\"Fetch news using NewsAPI\"\"\"\r\n    if not REQUESTS_AVAILABLE:\r\n        logging.info(\"Using demo news data (requests not available)\")\r\n        return get_demo_news(symbol, limit)\r\n        \r\n    api_key = os.getenv(\"NEWS_API_KEY\")\r\n    \r\n    if not api_key:\r\n        logging.warning(\"NEWS_API_KEY not found in environment variables, using demo data\")\r\n        return get_demo_news(symbol, limit)\r\n    \r\n    url = \"https://newsapi.org/v2/everything\"\r\n    params = {\r\n        'q': f'\"{symbol}\" OR \"{get_company_name(symbol)}\"',\r\n        'language': 'en',\r\n        'sortBy': 'publishedAt',\r\n        'pageSize': limit,\r\n        'apiKey': api_key\r\n    }\r\n    \r\n    try:\r\n        response = requests.get(url, params=params, timeout=10)\r\n        response.raise_for_status()\r\n        data = response.json()\r\n        \r\n        if data['status'] == 'ok' and data['articles']:\r\n            return data['articles']\r\n        else:\r\n            logging.warning(f\"No articles found for {symbol}\")\r\n            return []\r\n            \r\n    except requests.exceptions.RequestException as e:\r\n        logging.error(f\"Error fetching news from NewsAPI: {e}\")\r\n        return None\r\n\r\ndef fetch_news_yahoo(symbol, limit=10):\r\n    \"\"\"Fetch news using Yahoo Finance (fallback method)\"\"\"\r\n    if not YFINANCE_AVAILABLE:\r\n        logging.info(\"Using demo news data (yfinance not available)\")\r\n        return get_demo_news(symbol, limit)\r\n        \r\n    try:\r\n        \r\n        ticker = yf.Ticker(symbol)\r\n        news = ticker.news\r\n        \r\n        if not news:\r\n            return []\r\n        \r\n        # Transform Yahoo Finance news format to match NewsAPI format\r\n        articles = []\r\n        for item in news[:limit]:\r\n            articles.append({\r\n                'title': item.get('title', ''),\r\n                'description': item.get('summary', ''),\r\n                'url': item.get('link', ''),\r\n                'source': {'name': item.get('publisher', 'Yahoo Finance')},\r\n                'publishedAt': datetime.fromtimestamp(item.get('providerPublishTime', 0)).isoformat() + 'Z'\r\n            })\r\n        \r\n        return articles\r\n        \r\n    except ImportError:\r\n        logging.error(\"yfinance not available\")\r\n        return None\r\n    except Exception as e:\r\n        logging.error(f\"Error fetching news from Yahoo Finance: {e}\")\r\n        return None\r\n\r\ndef get_company_name(symbol):\r\n    \"\"\"Get company name for better search results\"\"\"\r\n    company_names = {\r\n        'AAPL': 'Apple Inc',\r\n        'TSLA': 'Tesla Inc',\r\n        'GOOGL': 'Google Alphabet',\r\n        'MSFT': 'Microsoft Corporation',\r\n        'AMZN': 'Amazon.com Inc',\r\n        'NVDA': 'NVIDIA Corporation',\r\n        'META': 'Meta Platforms Inc',\r\n        'NFLX': 'Netflix Inc',\r\n        'AMD': 'Advanced Micro Devices',\r\n        'INTC': 'Intel Corporation'\r\n    }\r\n    return company_names.get(symbol.upper(), symbol)\r\n\r\ndef simple_sentiment_analysis(text):\r\n    \"\"\"Simple fallback sentiment analysis using keyword matching\"\"\"\r\n    if not text:\r\n        return {'label': 'NEUTRAL', 'score': 0.5, 'confidence': 'Low'}\r\n    \r\n    text_lower = text.lower()\r\n    \r\n    # Positive keywords\r\n    positive_words = ['good', 'great', 'excellent', 'positive', 'up', 'rise', 'gain', 'profit', 'growth', 'strong', 'buy', 'bullish', 'surge', 'boost', 'increase', 'beat', 'exceed', 'outperform', 'success']\r\n    \r\n    # Negative keywords\r\n    negative_words = ['bad', 'terrible', 'negative', 'down', 'fall', 'loss', 'decline', 'weak', 'sell', 'bearish', 'drop', 'crash', 'decrease', 'miss', 'underperform', 'fail', 'concern', 'worry']\r\n    \r\n    positive_count = sum(1 for word in positive_words if word in text_lower)\r\n    negative_count = sum(1 for word in negative_words if word in text_lower)\r\n    \r\n    total_sentiment_words = positive_count + negative_count\r\n    \r\n    if total_sentiment_words == 0:\r\n        return {'label': 'NEUTRAL', 'score': 0.5, 'confidence': 'Low'}\r\n    \r\n    sentiment_score = positive_count / total_sentiment_words\r\n    \r\n    if sentiment_score > 0.6:\r\n        label = 'POSITIVE'\r\n        confidence = 'Medium' if sentiment_score > 0.8 else 'Low'\r\n    elif sentiment_score < 0.4:\r\n        label = 'NEGATIVE'\r\n        confidence = 'Medium' if sentiment_score < 0.2 else 'Low'\r\n    else:\r\n        label = 'NEUTRAL'\r\n        confidence = 'Low'\r\n    \r\n    return {\r\n        'label': label,\r\n        'score': round(sentiment_score, 3),\r\n        'confidence': confidence\r\n    }\r\n\r\ndef analyze_sentiment(text):\r\n    \"\"\"Analyze sentiment of a text using HuggingFace model or fallback\"\"\"\r\n    if not text:\r\n        return {\r\n            'label': 'NEUTRAL',\r\n            'score': 0.5,\r\n            'confidence': 'Low'\r\n        }\r\n    \r\n    # Try HuggingFace model first\r\n    if sentiment_analyzer:\r\n        try:\r\n            # Get sentiment prediction\r\n            results = sentiment_analyzer(text[:512])  # Limit text length\r\n            \r\n            # Extract the best prediction\r\n            best_result = max(results[0], key=lambda x: x['score'])\r\n            \r\n            # Map labels and determine confidence\r\n            label_map = {'POSITIVE': 'POSITIVE', 'NEGATIVE': 'NEGATIVE'}\r\n            sentiment_label = label_map.get(best_result['label'], 'NEUTRAL')\r\n            \r\n            confidence_level = 'High' if best_result['score'] > 0.8 else 'Medium' if best_result['score'] > 0.6 else 'Low'\r\n            \r\n            return {\r\n                'label': sentiment_label,\r\n                'score': round(best_result['score'], 3),\r\n                'confidence': confidence_level\r\n            }\r\n            \r\n        except Exception as e:\r\n            logging.error(f\"Error in HuggingFace sentiment analysis: {e}\")\r\n    \r\n    # Fallback to simple sentiment analysis\r\n    return simple_sentiment_analysis(text)\r\n\r\ndef analyze_news(symbol):\r\n    \"\"\"Main function to fetch news and analyze sentiment\"\"\"\r\n    logging.info(f\"Starting news analysis for {symbol}\")\r\n    \r\n    # Try NewsAPI first, then Yahoo Finance as fallback\r\n    articles = fetch_news_newsapi(symbol)\r\n    \r\n    if articles is None:\r\n        logging.info(\"NewsAPI failed, trying Yahoo Finance...\")\r\n        articles = fetch_news_yahoo(symbol)\r\n    \r\n    if articles is None:\r\n        return {\"error\": \"Failed to fetch news from any source. Please check your API keys and internet connection.\"}\r\n    \r\n    if not articles:\r\n        return {\"error\": f\"No news articles found for symbol {symbol}. Please try a different stock symbol.\"}\r\n    \r\n    # Analyze sentiment for each article\r\n    analyzed_articles = []\r\n    sentiment_counts = {'POSITIVE': 0, 'NEGATIVE': 0, 'NEUTRAL': 0}\r\n    \r\n    for article in articles:\r\n        # Combine title and description for better sentiment analysis\r\n        text_to_analyze = f\"{article.get('title', '')} {article.get('description', '')}\"\r\n        sentiment = analyze_sentiment(text_to_analyze)\r\n        \r\n        # Parse published date\r\n        try:\r\n            pub_date = datetime.fromisoformat(article.get('publishedAt', '').replace('Z', '+00:00'))\r\n            formatted_date = pub_date.strftime('%Y-%m-%d %H:%M UTC')\r\n        except:\r\n            formatted_date = 'Unknown'\r\n        \r\n        analyzed_article = {\r\n            'title': article.get('title', 'No Title'),\r\n            'description': article.get('description', ''),\r\n            'url': article.get('url', ''),\r\n            'source': article.get('source', {}).get('name', 'Unknown'),\r\n            'publishedAt': formatted_date,\r\n            'sentiment': sentiment\r\n        }\r\n        \r\n        analyzed_articles.append(analyzed_article)\r\n        sentiment_counts[sentiment['label']] += 1\r\n    \r\n    # Calculate sentiment percentages\r\n    total_articles = len(analyzed_articles)\r\n    sentiment_distribution = {\r\n        'positive': round((sentiment_counts['POSITIVE'] / total_articles) * 100, 1),\r\n        'negative': round((sentiment_counts['NEGATIVE'] / total_articles) * 100, 1),\r\n        'neutral': round((sentiment_counts['NEUTRAL'] / total_articles) * 100, 1)\r\n    }\r\n    \r\n    # Calculate overall sentiment score\r\n    overall_score = (sentiment_counts['POSITIVE'] - sentiment_counts['NEGATIVE']) / total_articles\r\n    overall_sentiment = 'POSITIVE' if overall_score > 0.1 else 'NEGATIVE' if overall_score < -0.1 else 'NEUTRAL'\r\n    \r\n    result = {\r\n        'symbol': symbol,\r\n        'articles': analyzed_articles,\r\n        'sentiment_distribution': sentiment_distribution,\r\n        'sentiment_counts': sentiment_counts,\r\n        'overall_sentiment': overall_sentiment,\r\n        'overall_score': round(overall_score, 3),\r\n        'total_articles': total_articles,\r\n        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')\r\n    }\r\n    \r\n    logging.info(f\"Successfully analyzed {total_articles} articles for {symbol}\")\r\n    return result\r\n","size_bytes":12194},"attached_assets/paper_trading_1756656822875.py":{"content":"from models import Portfolio, Position, Trade\r\nfrom models import db\r\n\r\nfrom datetime import datetime\r\nimport logging\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nclass PaperTradingEngine:\r\n    def __init__(self, database):\r\n        self.db = database\r\n        \r\n    def get_portfolio(self, user_id):\r\n        \"\"\"Get user's portfolio information\"\"\"\r\n        portfolio = Portfolio.query.filter_by(user_id=user_id).first()\r\n        if not portfolio:\r\n            # Create default portfolio\r\n            portfolio = Portfolio(user_id=user_id, balance=100000.0, total_value=100000.0)\r\n            self.db.session.add(portfolio)\r\n            self.db.session.commit()\r\n        \r\n        # Update portfolio value with current positions\r\n        self.update_portfolio_value(user_id)\r\n        return portfolio.to_dict()\r\n    \r\n    def get_positions(self, user_id):\r\n        \"\"\"Get user's current positions\"\"\"\r\n        positions = Position.query.filter_by(user_id=user_id).all()\r\n        return [pos.to_dict() for pos in positions]\r\n    \r\n    def get_trade_history(self, user_id, limit=50):\r\n        \"\"\"Get user's trade history\"\"\"\r\n        trades = Trade.query.filter_by(user_id=user_id)\\\r\n                           .order_by(Trade.executed_at.desc())\\\r\n                           .limit(limit).all()\r\n        return [trade.to_dict() for trade in trades]\r\n    \r\n    def place_order(self, user_id, symbol, side, quantity, price=None):\r\n        \"\"\"Place a buy or sell order\"\"\"\r\n        try:\r\n            # Get current market price (simulated)\r\n            from stock_simulator import StockSimulator\r\n            simulator = StockSimulator()\r\n            market_price = simulator.get_price(symbol)\r\n            \r\n            if not market_price:\r\n                return {'success': False, 'error': 'Invalid symbol'}\r\n            \r\n            execution_price = price if price else market_price\r\n            total_amount = execution_price * quantity\r\n            \r\n            # Get user's portfolio\r\n            portfolio = Portfolio.query.filter_by(user_id=user_id).first()\r\n            if not portfolio:\r\n                return {'success': False, 'error': 'Portfolio not found'}\r\n            \r\n            if side.upper() == 'BUY':\r\n                # Check if user has enough balance\r\n                if portfolio.balance < total_amount:\r\n                    return {'success': False, 'error': 'Insufficient funds'}\r\n                \r\n                # Update portfolio balance\r\n                portfolio.balance -= total_amount\r\n                \r\n                # Update or create position\r\n                position = Position.query.filter_by(user_id=user_id, symbol=symbol).first()\r\n                if position:\r\n                    # Calculate new average price\r\n                    total_shares = position.quantity + quantity\r\n                    total_cost = (position.avg_price * position.quantity) + total_amount\r\n                    position.avg_price = total_cost / total_shares\r\n                    position.quantity = total_shares\r\n                else:\r\n                    # Create new position\r\n                    position = Position(\r\n                        user_id=user_id,\r\n                        symbol=symbol,\r\n                        quantity=quantity,\r\n                        avg_price=execution_price\r\n                    )\r\n                    self.db.session.add(position)\r\n                \r\n            elif side.upper() == 'SELL':\r\n                # Check if user has enough shares\r\n                position = Position.query.filter_by(user_id=user_id, symbol=symbol).first()\r\n                if not position or position.quantity < quantity:\r\n                    return {'success': False, 'error': 'Insufficient shares'}\r\n                \r\n                # Update portfolio balance\r\n                portfolio.balance += total_amount\r\n                \r\n                # Update position\r\n                position.quantity -= quantity\r\n                if position.quantity == 0:\r\n                    self.db.session.delete(position)\r\n            \r\n            else:\r\n                return {'success': False, 'error': 'Invalid side'}\r\n            \r\n            # Create trade record\r\n            trade = Trade(\r\n                user_id=user_id,\r\n                symbol=symbol,\r\n                side=side.upper(),\r\n                quantity=quantity,\r\n                price=execution_price,\r\n                total_amount=total_amount,\r\n                commission=0.0  # No commission for paper trading\r\n            )\r\n            self.db.session.add(trade)\r\n            \r\n            # Update portfolio timestamp\r\n            portfolio.updated_at = datetime.utcnow()\r\n            \r\n            self.db.session.commit()\r\n            \r\n            logger.info(f\"Order executed: {side} {quantity} {symbol} at ${execution_price}\")\r\n            \r\n            return {\r\n                'success': True,\r\n                'trade_id': trade.id,\r\n                'executed_price': execution_price,\r\n                'total_amount': total_amount\r\n            }\r\n            \r\n        except Exception as e:\r\n            logger.error(f\"Error placing order: {e}\")\r\n            self.db.session.rollback()\r\n            return {'success': False, 'error': str(e)}\r\n    \r\n    def update_portfolio_value(self, user_id):\r\n        \"\"\"Update portfolio total value based on current positions\"\"\"\r\n        try:\r\n            portfolio = Portfolio.query.filter_by(user_id=user_id).first()\r\n            if not portfolio:\r\n                return\r\n            \r\n            positions = Position.query.filter_by(user_id=user_id).all()\r\n            \r\n            from stock_simulator import StockSimulator\r\n            simulator = StockSimulator()\r\n            \r\n            total_position_value = 0.0\r\n            \r\n            for position in positions:\r\n                current_price = simulator.get_price(position.symbol)\r\n                if current_price:\r\n                    position.current_price = current_price\r\n                    position.market_value = position.quantity * current_price\r\n                    position.unrealized_pnl = position.market_value - (position.quantity * position.avg_price)\r\n                    total_position_value += position.market_value\r\n            \r\n            portfolio.total_value = portfolio.balance + total_position_value\r\n            self.db.session.commit()\r\n            \r\n        except Exception as e:\r\n            logger.error(f\"Error updating portfolio value: {e}\")\r\n            self.db.session.rollback()\r\n","size_bytes":6544},"attached_assets/prediction_1756656822878.py":{"content":"import pandas as pd\r\nimport numpy as np\r\nfrom sklearn.ensemble import RandomForestRegressor\r\nfrom sklearn.linear_model import LinearRegression\r\nfrom sklearn.preprocessing import StandardScaler\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\r\nimport logging\r\nfrom datetime import datetime, timedelta\r\n\r\nclass StockPredictor:\r\n    def __init__(self):\r\n        self.model = None\r\n        self.scaler = StandardScaler()\r\n        self.feature_importance = None\r\n        \r\n    def prepare_features(self, data):\r\n        \"\"\"Prepare features for machine learning model\"\"\"\r\n        df = data.copy()\r\n        \r\n        # Calculate technical indicators\r\n        df['SMA_5'] = df['Close'].rolling(window=5).mean()\r\n        df['SMA_10'] = df['Close'].rolling(window=10).mean()\r\n        df['SMA_20'] = df['Close'].rolling(window=20).mean()\r\n        df['SMA_50'] = df['Close'].rolling(window=50).mean()\r\n        \r\n        # Price ratios\r\n        df['Price_SMA5_Ratio'] = df['Close'] / df['SMA_5']\r\n        df['Price_SMA20_Ratio'] = df['Close'] / df['SMA_20']\r\n        \r\n        # Volatility\r\n        df['Volatility'] = df['Close'].rolling(window=10).std()\r\n        \r\n        # Volume indicators\r\n        df['Volume_SMA'] = df['Volume'].rolling(window=10).mean()\r\n        df['Volume_Ratio'] = df['Volume'] / df['Volume_SMA']\r\n        \r\n        # Price momentum\r\n        df['Momentum_5'] = df['Close'] / df['Close'].shift(5)\r\n        df['Momentum_10'] = df['Close'] / df['Close'].shift(10)\r\n        \r\n        # RSI\r\n        df['RSI'] = self.calculate_rsi(df['Close'])\r\n        \r\n        # MACD\r\n        exp1 = df['Close'].ewm(span=12).mean()\r\n        exp2 = df['Close'].ewm(span=26).mean()\r\n        df['MACD'] = exp1 - exp2\r\n        df['MACD_Signal'] = df['MACD'].ewm(span=9).mean()\r\n        \r\n        # Bollinger Bands\r\n        df['BB_Middle'] = df['Close'].rolling(window=20).mean()\r\n        bb_std = df['Close'].rolling(window=20).std()\r\n        df['BB_Upper'] = df['BB_Middle'] + (bb_std * 2)\r\n        df['BB_Lower'] = df['BB_Middle'] - (bb_std * 2)\r\n        df['BB_Position'] = (df['Close'] - df['BB_Lower']) / (df['BB_Upper'] - df['BB_Lower'])\r\n        \r\n        # High-Low ratios\r\n        df['HL_Ratio'] = df['High'] / df['Low']\r\n        df['OC_Ratio'] = df['Open'] / df['Close']\r\n        \r\n        # Select features for prediction\r\n        feature_columns = [\r\n            'SMA_5', 'SMA_10', 'SMA_20', 'SMA_50',\r\n            'Price_SMA5_Ratio', 'Price_SMA20_Ratio',\r\n            'Volatility', 'Volume_Ratio',\r\n            'Momentum_5', 'Momentum_10',\r\n            'RSI', 'MACD', 'MACD_Signal',\r\n            'BB_Position', 'HL_Ratio', 'OC_Ratio'\r\n        ]\r\n        \r\n        return df[feature_columns].dropna()\r\n    \r\n    def calculate_rsi(self, prices, window=14):\r\n        \"\"\"Calculate Relative Strength Index\"\"\"\r\n        delta = prices.diff()\r\n        gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()\r\n        loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()\r\n        rs = gain / loss\r\n        rsi = 100 - (100 / (1 + rs))\r\n        return rsi\r\n    \r\n    def train_model(self, features, target):\r\n        \"\"\"Train the prediction model\"\"\"\r\n        if len(features) < 50:  # Need minimum data for training\r\n            return False\r\n            \r\n        # Split data\r\n        X_train, X_test, y_train, y_test = train_test_split(\r\n            features, target, test_size=0.2, random_state=42\r\n        )\r\n        \r\n        # Scale features\r\n        X_train_scaled = self.scaler.fit_transform(X_train)\r\n        X_test_scaled = self.scaler.transform(X_test)\r\n        \r\n        # Train Random Forest model\r\n        self.model = RandomForestRegressor(\r\n            n_estimators=100,\r\n            max_depth=10,\r\n            random_state=42,\r\n            n_jobs=-1\r\n        )\r\n        \r\n        self.model.fit(X_train_scaled, y_train)\r\n        \r\n        # Calculate feature importance\r\n        self.feature_importance = dict(zip(\r\n            features.columns,\r\n            self.model.feature_importances_\r\n        ))\r\n        \r\n        # Evaluate model\r\n        y_pred = self.model.predict(X_test_scaled)\r\n        mae = mean_absolute_error(y_test, y_pred)\r\n        rmse = np.sqrt(mean_squared_error(y_test, y_pred))\r\n        \r\n        logging.info(f\"Model trained. MAE: {mae:.4f}, RMSE: {rmse:.4f}\")\r\n        \r\n        return True\r\n    \r\n    def predict(self, stock_data):\r\n        \"\"\"Generate prediction for stock data\"\"\"\r\n        try:\r\n            # Prepare features\r\n            features = self.prepare_features(stock_data)\r\n            \r\n            if len(features) < 50:\r\n                return None\r\n            \r\n            # Prepare target (next day's closing price)\r\n            target = stock_data['Close'].shift(-1).dropna()\r\n            \r\n            # Align features and target\r\n            min_length = min(len(features), len(target))\r\n            features = features.iloc[:min_length]\r\n            target = target.iloc[:min_length]\r\n            \r\n            # Train model\r\n            if not self.train_model(features, target):\r\n                return None\r\n            \r\n            # Make prediction for next day\r\n            latest_features = features.iloc[-1:].values\r\n            latest_features_scaled = self.scaler.transform(latest_features)\r\n            \r\n            predicted_price = self.model.predict(latest_features_scaled)[0]\r\n            current_price = stock_data['Close'].iloc[-1]\r\n            \r\n            # Calculate prediction metrics\r\n            price_change = predicted_price - current_price\r\n            price_change_percent = (price_change / current_price) * 100\r\n            \r\n            # Generate confidence score based on recent volatility\r\n            recent_volatility = stock_data['Close'].tail(10).std()\r\n            avg_price = stock_data['Close'].tail(10).mean()\r\n            volatility_ratio = recent_volatility / avg_price\r\n            confidence = max(0.3, min(0.95, 1 - (volatility_ratio * 10)))\r\n            \r\n            # Generate explanation based on feature importance\r\n            explanation = self.generate_explanation(features.iloc[-1])\r\n            \r\n            # Determine trend\r\n            if price_change_percent > 1:\r\n                trend = \"Strong Bullish\"\r\n            elif price_change_percent > 0:\r\n                trend = \"Bullish\"\r\n            elif price_change_percent > -1:\r\n                trend = \"Bearish\"\r\n            else:\r\n                trend = \"Strong Bearish\"\r\n            \r\n            return {\r\n                'predicted_price': round(predicted_price, 2),\r\n                'current_price': round(current_price, 2),\r\n                'price_change': round(price_change, 2),\r\n                'price_change_percent': round(price_change_percent, 2),\r\n                'confidence': round(confidence * 100, 1),\r\n                'trend': trend,\r\n                'explanation': explanation,\r\n                'prediction_date': (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d'),\r\n                'model_accuracy': round((1 - volatility_ratio) * 100, 1)\r\n            }\r\n            \r\n        except Exception as e:\r\n            logging.error(f\"Error in prediction: {str(e)}\")\r\n            return None\r\n    \r\n    def generate_explanation(self, latest_features):\r\n        \"\"\"Generate explainable AI reasoning for the prediction\"\"\"\r\n        if self.feature_importance is None:\r\n            return \"Model training in progress...\"\r\n        \r\n        # Get top 3 most important features\r\n        top_features = sorted(\r\n            self.feature_importance.items(),\r\n            key=lambda x: x[1],\r\n            reverse=True\r\n        )[:3]\r\n        \r\n        explanations = []\r\n        \r\n        for feature, importance in top_features:\r\n            feature_value = latest_features[feature]\r\n            \r\n            if 'SMA' in feature:\r\n                if feature_value > 1:\r\n                    explanations.append(f\"Price is above {feature.replace('_', ' ')} (bullish indicator)\")\r\n                else:\r\n                    explanations.append(f\"Price is below {feature.replace('_', ' ')} (bearish indicator)\")\r\n            \r\n            elif 'RSI' in feature:\r\n                if feature_value > 70:\r\n                    explanations.append(\"RSI indicates overbought conditions (potential reversal)\")\r\n                elif feature_value < 30:\r\n                    explanations.append(\"RSI indicates oversold conditions (potential upside)\")\r\n                else:\r\n                    explanations.append(\"RSI shows neutral momentum\")\r\n            \r\n            elif 'Volatility' in feature:\r\n                if feature_value > latest_features.std():\r\n                    explanations.append(\"High volatility suggests increased uncertainty\")\r\n                else:\r\n                    explanations.append(\"Low volatility suggests stable price movement\")\r\n            \r\n            elif 'Volume' in feature:\r\n                if feature_value > 1:\r\n                    explanations.append(\"Above-average volume supports price movement\")\r\n                else:\r\n                    explanations.append(\"Below-average volume indicates weak conviction\")\r\n            \r\n            elif 'Momentum' in feature:\r\n                if feature_value > 1:\r\n                    explanations.append(\"Positive momentum suggests continued upward movement\")\r\n                else:\r\n                    explanations.append(\"Negative momentum suggests downward pressure\")\r\n        \r\n        return explanations[:3]  # Return top 3 explanations\r\n","size_bytes":9612},"attached_assets/stock_simulator_1756656822885.py":{"content":"import random\r\nimport time\r\nimport math\r\nfrom datetime import datetime\r\n\r\nclass StockSimulator:\r\n    def __init__(self):\r\n        # Initialize with popular stocks and their base prices\r\n        self.stocks = {\r\n            'AAPL': {'price': 175.00, 'base_price': 175.00, 'volatility': 0.02},\r\n            'GOOGL': {'price': 135.00, 'base_price': 135.00, 'volatility': 0.025},\r\n            'MSFT': {'price': 340.00, 'base_price': 340.00, 'volatility': 0.02},\r\n            'AMZN': {'price': 145.00, 'base_price': 145.00, 'volatility': 0.03},\r\n            'TSLA': {'price': 240.00, 'base_price': 240.00, 'volatility': 0.05},\r\n            'NVDA': {'price': 450.00, 'base_price': 450.00, 'volatility': 0.04},\r\n            'META': {'price': 320.00, 'base_price': 320.00, 'volatility': 0.035},\r\n            'NFLX': {'price': 420.00, 'base_price': 420.00, 'volatility': 0.03},\r\n            'ADBE': {'price': 530.00, 'base_price': 530.00, 'volatility': 0.025},\r\n            'CRM': {'price': 210.00, 'base_price': 210.00, 'volatility': 0.03}\r\n        }\r\n        \r\n        # Store price history for charts\r\n        self.price_history = {}\r\n        for symbol in self.stocks:\r\n            self.price_history[symbol] = []\r\n        \r\n        self.last_update = time.time()\r\n    \r\n    def update_prices(self):\r\n        \"\"\"Update stock prices with realistic movements\"\"\"\r\n        current_time = time.time()\r\n        \r\n        # Market hours simulation (more volatility during trading hours)\r\n        now = datetime.now()\r\n        hour = now.hour\r\n        \r\n        # Simulate market hours (9:30 AM - 4:00 PM EST)\r\n        market_open = 9.5 <= hour <= 16\r\n        volatility_multiplier = 1.0 if market_open else 0.3\r\n        \r\n        for symbol, data in self.stocks.items():\r\n            # Generate price movement using geometric Brownian motion\r\n            dt = 1.0 / 3600  # 1 second time step in hours\r\n            volatility = data['volatility'] * volatility_multiplier\r\n            \r\n            # Random walk with mean reversion\r\n            random_component = random.gauss(0, 1)\r\n            \r\n            # Mean reversion factor (tendency to return to base price)\r\n            mean_reversion = 0.001 * (data['base_price'] - data['price']) / data['base_price']\r\n            \r\n            # Market trend factor (small upward bias)\r\n            trend = 0.0001\r\n            \r\n            # Calculate price change\r\n            price_change = data['price'] * (\r\n                (trend + mean_reversion) * dt + \r\n                volatility * math.sqrt(dt) * random_component\r\n            )\r\n            \r\n            # Update price\r\n            new_price = data['price'] + price_change\r\n            \r\n            # Ensure price doesn't go negative or too extreme\r\n            min_price = data['base_price'] * 0.5\r\n            max_price = data['base_price'] * 2.0\r\n            new_price = max(min_price, min(max_price, new_price))\r\n            \r\n            data['price'] = round(new_price, 2)\r\n            \r\n            # Store price history (keep last 100 points)\r\n            timestamp = int(current_time * 1000)\r\n            self.price_history[symbol].append({\r\n                'timestamp': timestamp,\r\n                'price': data['price']\r\n            })\r\n            \r\n            # Keep only last 100 data points\r\n            if len(self.price_history[symbol]) > 100:\r\n                self.price_history[symbol].pop(0)\r\n        \r\n        self.last_update = current_time\r\n    \r\n    def get_price(self, symbol):\r\n        \"\"\"Get current price for a symbol\"\"\"\r\n        return self.stocks.get(symbol, {}).get('price', 0.0)\r\n    \r\n    def get_all_prices(self):\r\n        \"\"\"Get all current prices\"\"\"\r\n        return {\r\n            symbol: {\r\n                'price': data['price'],\r\n                'change': round(data['price'] - data['base_price'], 2),\r\n                'change_percent': round(((data['price'] - data['base_price']) / data['base_price']) * 100, 2),\r\n                'history': self.price_history.get(symbol, [])\r\n            }\r\n            for symbol, data in self.stocks.items()\r\n        }\r\n    \r\n    def get_price_history(self, symbol, limit=50):\r\n        \"\"\"Get price history for a symbol\"\"\"\r\n        return self.price_history.get(symbol, [])[-limit:]\r\n","size_bytes":4261},"attached_assets/train_model_1756656822886.py":{"content":"import pandas as pd\r\nimport numpy as np\r\nfrom sklearn.ensemble import RandomForestRegressor\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.metrics import mean_squared_error\r\nimport joblib\r\n\r\n# 1️⃣ Load your CSV file\r\ndf = pd.read_csv(\"HIST_CSV.csv\")  # replace with your CSV file path\r\n\r\n# 2️⃣ Preprocess data\r\ndf['Date'] = pd.to_datetime(df['Date'])\r\ndf = df.sort_values('Date')\r\n\r\n# Extract day, month, year as features\r\ndf['Day'] = df['Date'].dt.day\r\ndf['Month'] = df['Date'].dt.month\r\ndf['Year'] = df['Date'].dt.year\r\n\r\n# Features (adjust according to your CSV)\r\nX = df[['Closing Volume', 'Volume', '50-Day Moving Average', '200-Day Moving Average', 'Day', 'Month', 'Year']]\r\n\r\n# Target (what we want to predict)\r\ny = df['Closing Volume']  # or use 'Close' column if available\r\n\r\n# 3️⃣ Split into train & test\r\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)\r\n\r\n# 4️⃣ Train the model\r\nmodel = RandomForestRegressor(n_estimators=100, random_state=42)\r\nmodel.fit(X_train, y_train)\r\n\r\n# 5️⃣ Test the model\r\ny_pred = model.predict(X_test)\r\nmse = mean_squared_error(y_test, y_pred)\r\nprint(f\"✅ Model trained! Test MSE: {mse:.2f}\")\r\n\r\n# 6️⃣ Save the model\r\njoblib.dump(model, \"stock_model.pkl\")\r\nprint(\"💾 Model saved as stock_model.pkl\")\r\n","size_bytes":1326},"static/css/style.css":{"content":"/* CashOnDay - Fintech App Styles */\n\n:root {\n    --primary-color: #1a1a2e;\n    --secondary-color: #16213e;\n    --accent-color: #0f4c75;\n    --background-color: #f8f9fa;\n    --success-color: #28a745;\n    --warning-color: #ffc107;\n    --danger-color: #dc3545;\n    --info-color: #17a2b8;\n    --light-color: #f8f9fa;\n    --dark-color: #343a40;\n    --border-radius: 8px;\n    --spacing-sm: 16px;\n    --spacing-md: 24px;\n    --font-family: 'Inter', 'Roboto', sans-serif;\n}\n\n/* Global Styles */\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: var(--font-family);\n    background-color: var(--background-color);\n    color: var(--dark-color);\n    line-height: 1.6;\n}\n\n/* Typography */\nh1, h2, h3, h4, h5, h6 {\n    font-weight: 600;\n    color: var(--primary-color);\n}\n\n.text-primary {\n    color: var(--primary-color) !important;\n}\n\n.text-secondary {\n    color: var(--secondary-color) !important;\n}\n\n.text-accent {\n    color: var(--accent-color) !important;\n}\n\n/* Authentication Pages */\n.auth-page {\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);\n    min-height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.auth-container {\n    width: 100%;\n    max-width: 400px;\n    padding: var(--spacing-md);\n}\n\n.auth-card {\n    background: white;\n    border-radius: var(--border-radius);\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n    overflow: hidden;\n}\n\n.auth-header {\n    background: var(--primary-color);\n    color: white;\n    padding: var(--spacing-md);\n    text-align: center;\n}\n\n.auth-header h2 {\n    color: white;\n    margin-bottom: 8px;\n}\n\n.auth-form {\n    padding: var(--spacing-md);\n}\n\n.auth-footer {\n    background: var(--background-color);\n    padding: var(--spacing-sm);\n    text-align: center;\n    border-top: 1px solid #dee2e6;\n}\n\n/* Password Toggle */\n.form-floating {\n    position: relative;\n}\n\n.password-toggle {\n    position: absolute;\n    right: 12px;\n    top: 50%;\n    transform: translateY(-50%);\n    background: none;\n    border: none;\n    color: #6c757d;\n    z-index: 10;\n    padding: 4px;\n}\n\n.password-toggle:hover {\n    color: var(--primary-color);\n}\n\n/* Password Strength */\n.password-strength {\n    margin-bottom: var(--spacing-sm);\n}\n\n.strength-bar {\n    height: 4px;\n    background-color: #e9ecef;\n    border-radius: 2px;\n    overflow: hidden;\n    margin-bottom: 4px;\n}\n\n.strength-fill {\n    height: 100%;\n    transition: width 0.3s ease, background-color 0.3s ease;\n    border-radius: 2px;\n}\n\n.password-requirements {\n    font-size: 0.875rem;\n}\n\n.requirements-list {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n}\n\n.requirement {\n    padding: 2px 0;\n    color: #6c757d;\n    transition: color 0.3s ease;\n}\n\n.requirement.met {\n    color: var(--success-color);\n}\n\n/* Sidebar Navigation */\n.sidebar {\n    position: fixed;\n    top: 0;\n    left: -300px;\n    width: 300px;\n    height: 100vh;\n    background: var(--primary-color);\n    color: white;\n    transition: left 0.3s ease;\n    z-index: 1050;\n    overflow-y: auto;\n}\n\n.sidebar.active {\n    left: 0;\n}\n\n.sidebar-header {\n    padding: var(--spacing-md);\n    border-bottom: 1px solid var(--secondary-color);\n    display: flex;\n    justify-content: between;\n    align-items: center;\n}\n\n.sidebar-header h3 {\n    color: white;\n    margin: 0;\n    flex-grow: 1;\n}\n\n.sidebar-nav {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n}\n\n.sidebar-nav .nav-item {\n    border-bottom: 1px solid var(--secondary-color);\n}\n\n.sidebar-nav .nav-link {\n    display: flex;\n    align-items: center;\n    padding: var(--spacing-sm) var(--spacing-md);\n    color: #adb5bd;\n    text-decoration: none;\n    transition: all 0.3s ease;\n}\n\n.sidebar-nav .nav-link:hover {\n    color: white;\n    background-color: var(--secondary-color);\n}\n\n.sidebar-nav .nav-link.active {\n    color: white;\n    background-color: var(--accent-color);\n}\n\n.sidebar-nav .nav-link i {\n    margin-right: 12px;\n    width: 20px;\n}\n\n/* Main Content */\n.main-content {\n    transition: margin-left 0.3s ease;\n    min-height: 100vh;\n}\n\n.main-content.sidebar-open {\n    margin-left: 300px;\n}\n\n.content {\n    flex: 1;\n}\n\n/* Cards */\n.card {\n    border: none;\n    border-radius: var(--border-radius);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    margin-bottom: var(--spacing-md);\n}\n\n.card-header {\n    background-color: white;\n    border-bottom: 1px solid #dee2e6;\n    font-weight: 600;\n    color: var(--primary-color);\n}\n\n/* Stats Cards */\n.stats-card {\n    background: white;\n    border-radius: var(--border-radius);\n    padding: var(--spacing-md);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    display: flex;\n    align-items: center;\n    margin-bottom: var(--spacing-md);\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.stats-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n}\n\n.stats-icon {\n    width: 60px;\n    height: 60px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-right: var(--spacing-sm);\n    color: white;\n}\n\n.stats-icon.bg-primary {\n    background-color: var(--primary-color);\n}\n\n.stats-icon.bg-success {\n    background-color: var(--success-color);\n}\n\n.stats-icon.bg-info {\n    background-color: var(--info-color);\n}\n\n.stats-icon.bg-warning {\n    background-color: var(--warning-color);\n}\n\n.stats-content h3 {\n    margin: 0;\n    font-size: 1.75rem;\n    font-weight: 700;\n    color: var(--primary-color);\n}\n\n.stats-content p {\n    margin: 0;\n    color: #6c757d;\n    font-size: 0.875rem;\n}\n\n/* Welcome Section */\n.welcome-section {\n    margin-bottom: var(--spacing-md);\n}\n\n.welcome-section h1 {\n    color: var(--primary-color);\n    margin-bottom: 8px;\n}\n\n/* Watchlist */\n.watchlist-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 12px 0;\n    border-bottom: 1px solid #e9ecef;\n}\n\n.watchlist-item:last-child {\n    border-bottom: none;\n}\n\n.stock-info strong {\n    color: var(--primary-color);\n}\n\n.stock-change.text-success {\n    color: var(--success-color) !important;\n}\n\n.stock-change.text-danger {\n    color: var(--danger-color) !important;\n}\n\n/* Activity List */\n.activity-list {\n    max-height: 300px;\n    overflow-y: auto;\n}\n\n.activity-item {\n    display: flex;\n    align-items: center;\n    padding: 12px 0;\n    border-bottom: 1px solid #e9ecef;\n}\n\n.activity-item:last-child {\n    border-bottom: none;\n}\n\n.activity-icon {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background-color: var(--accent-color);\n    color: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-right: 12px;\n}\n\n.activity-content {\n    flex: 1;\n}\n\n/* Quick Actions */\n.quick-actions {\n    display: flex;\n    gap: 12px;\n    flex-wrap: wrap;\n}\n\n/* Buttons */\n.btn {\n    border-radius: var(--border-radius);\n    font-weight: 500;\n    transition: all 0.2s ease;\n}\n\n.btn-primary {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n}\n\n.btn-primary:hover {\n    background-color: var(--secondary-color);\n    border-color: var(--secondary-color);\n}\n\n.btn-success {\n    background-color: var(--success-color);\n    border-color: var(--success-color);\n}\n\n.btn-info {\n    background-color: var(--info-color);\n    border-color: var(--info-color);\n}\n\n.btn-warning {\n    background-color: var(--warning-color);\n    border-color: var(--warning-color);\n}\n\n/* Trading Interface */\n.order-preview {\n    background-color: var(--light-color);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-sm);\n}\n\n.stock-quote-display {\n    text-align: center;\n}\n\n.stock-quote-display h4 {\n    color: var(--primary-color);\n    margin-bottom: 8px;\n}\n\n.stock-quote-display h3 {\n    font-size: 2rem;\n    font-weight: 700;\n    margin-bottom: 8px;\n}\n\n.quick-trade-buttons .btn {\n    margin-bottom: 8px;\n}\n\n/* News Interface */\n.news-article-card {\n    transition: transform 0.2s ease;\n}\n\n.news-article-card:hover {\n    transform: translateY(-1px);\n}\n\n.sentiment-badges {\n    display: flex;\n    gap: 4px;\n}\n\n.article-meta {\n    font-size: 0.875rem;\n}\n\n/* Sentiment Stats */\n.sentiment-stat {\n    display: flex;\n    align-items: center;\n    padding: var(--spacing-sm);\n    background: white;\n    border-radius: var(--border-radius);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.sentiment-icon {\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-right: 12px;\n    color: white;\n}\n\n.sentiment-icon.positive {\n    background-color: var(--success-color);\n}\n\n.sentiment-icon.negative {\n    background-color: var(--danger-color);\n}\n\n.sentiment-icon.neutral {\n    background-color: #6c757d;\n}\n\n.sentiment-icon.overall {\n    background-color: var(--info-color);\n}\n\n.sentiment-content h3 {\n    margin: 0;\n    font-size: 1.5rem;\n    font-weight: 700;\n}\n\n.sentiment-content p {\n    margin: 0;\n    font-size: 0.875rem;\n    color: #6c757d;\n}\n\n/* Settings */\n.settings-section {\n    animation: fadeIn 0.3s ease;\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; transform: translateY(10px); }\n    to { opacity: 1; transform: translateY(0); }\n}\n\n/* Profile */\n.profile-avatar {\n    width: 80px;\n    height: 80px;\n    border-radius: 50%;\n    background-color: var(--primary-color);\n    color: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto;\n}\n\n/* Prediction Interface */\n.prediction-status {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.prediction-summary {\n    text-align: center;\n}\n\n.prediction-price h2 {\n    color: var(--primary-color);\n    font-weight: 700;\n}\n\n.confidence-meter .progress {\n    height: 8px;\n}\n\n.trend-indicator .badge {\n    font-size: 0.875rem;\n    padding: 8px 12px;\n}\n\n.technical-indicators .indicator-item {\n    padding: 8px 0;\n    border-bottom: 1px solid #e9ecef;\n}\n\n.technical-indicators .indicator-item:last-child {\n    border-bottom: none;\n}\n\n.explanation-item {\n    padding: 8px 0;\n}\n\n/* Alerts */\n.alert-filters {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .sidebar {\n        width: 100%;\n        left: -100%;\n    }\n    \n    .main-content.sidebar-open {\n        margin-left: 0;\n    }\n    \n    .stats-card {\n        flex-direction: column;\n        text-align: center;\n    }\n    \n    .stats-icon {\n        margin-right: 0;\n        margin-bottom: 12px;\n    }\n    \n    .quick-actions {\n        justify-content: center;\n    }\n    \n    .auth-container {\n        padding: var(--spacing-sm);\n    }\n}\n\n@media (max-width: 576px) {\n    .container-fluid {\n        padding-left: 12px;\n        padding-right: 12px;\n    }\n    \n    .card-body {\n        padding: var(--spacing-sm);\n    }\n    \n    .btn-group-sm .btn {\n        font-size: 0.75rem;\n        padding: 4px 8px;\n    }\n}\n\n/* Dark Theme Support */\n.theme-dark {\n    --background-color: #1a1a1a;\n    --primary-color: #ffffff;\n    --dark-color: #ffffff;\n}\n\n.theme-dark .card {\n    background-color: #2d2d2d;\n    color: white;\n}\n\n.theme-dark .card-header {\n    background-color: #2d2d2d;\n    border-bottom-color: #404040;\n    color: white;\n}\n\n.theme-dark .table {\n    color: white;\n}\n\n.theme-dark .form-control {\n    background-color: #2d2d2d;\n    border-color: #404040;\n    color: white;\n}\n\n.theme-dark .form-control:focus {\n    background-color: #2d2d2d;\n    border-color: var(--accent-color);\n    color: white;\n}\n\n/* Animations */\n.fade-in {\n    animation: fadeIn 0.5s ease;\n}\n\n.slide-up {\n    animation: slideUp 0.3s ease;\n}\n\n@keyframes slideUp {\n    from { transform: translateY(20px); opacity: 0; }\n    to { transform: translateY(0); opacity: 1; }\n}\n\n/* Loading States */\n.spinner-border {\n    width: 2rem;\n    height: 2rem;\n}\n\n.loading-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(255, 255, 255, 0.8);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 10;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n    width: 6px;\n}\n\n::-webkit-scrollbar-track {\n    background: #f1f1f1;\n}\n\n::-webkit-scrollbar-thumb {\n    background: var(--accent-color);\n    border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: var(--primary-color);\n}\n\n/* Utility Classes */\n.text-truncate {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n\n.shadow-sm {\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n}\n\n.shadow {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n}\n\n.border-radius {\n    border-radius: var(--border-radius) !important;\n}\n\n.spacing-sm {\n    padding: var(--spacing-sm);\n}\n\n.spacing-md {\n    padding: var(--spacing-md);\n}\n","size_bytes":12730},"static/js/main.js":{"content":"// CashOnDay - Main JavaScript File\n// Handles real-time updates, UI interactions, and client-side functionality\n\nclass CashOnDayApp {\n    constructor() {\n        this.socket = null;\n        this.currentTheme = 'light';\n        this.charts = new Map();\n        this.priceUpdateInterval = null;\n        this.init();\n    }\n\n    init() {\n        this.initializeSocket();\n        this.setupEventListeners();\n        this.initializeTheme();\n        this.setupSidebar();\n        this.initializeFeatherIcons();\n        this.setupFormValidations();\n    }\n\n    // Socket.IO Real-time Updates\n    initializeSocket() {\n        if (typeof io !== 'undefined') {\n            this.socket = io();\n            \n            this.socket.on('connect', () => {\n                console.log('Connected to server');\n                this.updateConnectionStatus(true);\n            });\n\n            this.socket.on('disconnect', () => {\n                console.log('Disconnected from server');\n                this.updateConnectionStatus(false);\n            });\n\n            this.socket.on('price_update', (data) => {\n                this.handlePriceUpdate(data);\n            });\n\n            this.socket.on('alert_triggered', (data) => {\n                this.showAlert('warning', `Alert: ${data.message}`, 5000);\n            });\n\n            this.socket.on('trade_update', (data) => {\n                this.handleTradeUpdate(data);\n            });\n        }\n    }\n\n    // Event Listeners\n    setupEventListeners() {\n        // Global click handlers\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('[data-bs-toggle=\"sidebar\"]') || e.target.closest('[data-bs-toggle=\"sidebar\"]')) {\n                this.toggleSidebar();\n            }\n        });\n\n        // Form submissions\n        document.addEventListener('submit', (e) => {\n            if (e.target.matches('.needs-validation')) {\n                this.validateForm(e);\n            }\n        });\n\n        // Theme switcher\n        const themeInputs = document.querySelectorAll('input[name=\"theme\"]');\n        themeInputs.forEach(input => {\n            input.addEventListener('change', (e) => {\n                this.setTheme(e.target.value);\n            });\n        });\n\n        // Auto-refresh toggles\n        const autoRefreshInputs = document.querySelectorAll('[data-auto-refresh]');\n        autoRefreshInputs.forEach(input => {\n            input.addEventListener('change', (e) => {\n                this.toggleAutoRefresh(e.target.checked);\n            });\n        });\n\n        // Search inputs with debounce\n        const searchInputs = document.querySelectorAll('[data-search]');\n        searchInputs.forEach(input => {\n            let timeout;\n            input.addEventListener('input', (e) => {\n                clearTimeout(timeout);\n                timeout = setTimeout(() => {\n                    this.handleSearch(e.target.value, e.target.dataset.search);\n                }, 300);\n            });\n        });\n\n        // Copy to clipboard buttons\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('[data-copy]') || e.target.closest('[data-copy]')) {\n                const button = e.target.matches('[data-copy]') ? e.target : e.target.closest('[data-copy]');\n                this.copyToClipboard(button.dataset.copy);\n            }\n        });\n\n        // Confirmation dialogs\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('[data-confirm]') || e.target.closest('[data-confirm]')) {\n                const button = e.target.matches('[data-confirm]') ? e.target : e.target.closest('[data-confirm]');\n                if (!confirm(button.dataset.confirm)) {\n                    e.preventDefault();\n                    return false;\n                }\n            }\n        });\n\n        // Number input formatters\n        const numberInputs = document.querySelectorAll('input[type=\"number\"][data-format=\"currency\"]');\n        numberInputs.forEach(input => {\n            input.addEventListener('blur', (e) => {\n                this.formatCurrencyInput(e.target);\n            });\n        });\n\n        // Tab switching\n        const tabButtons = document.querySelectorAll('[data-tab-target]');\n        tabButtons.forEach(button => {\n            button.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.switchTab(e.target.dataset.tabTarget);\n            });\n        });\n    }\n\n    // Theme Management\n    initializeTheme() {\n        const savedTheme = localStorage.getItem('cashonday-theme') || 'light';\n        this.setTheme(savedTheme);\n    }\n\n    setTheme(theme) {\n        this.currentTheme = theme;\n        document.body.className = document.body.className.replace(/theme-\\w+/, '');\n        \n        if (theme === 'auto') {\n            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n            theme = prefersDark ? 'dark' : 'light';\n        }\n        \n        document.body.classList.add(`theme-${theme}`);\n        localStorage.setItem('cashonday-theme', this.currentTheme);\n        \n        // Update theme radio button\n        const themeInput = document.querySelector(`input[name=\"theme\"][value=\"${this.currentTheme}\"]`);\n        if (themeInput) {\n            themeInput.checked = true;\n        }\n    }\n\n    // Sidebar Management\n    setupSidebar() {\n        const sidebar = document.getElementById('sidebar');\n        const mainContent = document.querySelector('.main-content');\n        \n        if (!sidebar || !mainContent) return;\n\n        // Close sidebar when clicking outside on mobile\n        document.addEventListener('click', (e) => {\n            if (window.innerWidth <= 768 && sidebar.classList.contains('active')) {\n                if (!sidebar.contains(e.target) && !e.target.matches('[data-bs-toggle=\"sidebar\"]')) {\n                    this.toggleSidebar();\n                }\n            }\n        });\n\n        // Handle window resize\n        window.addEventListener('resize', () => {\n            if (window.innerWidth > 768) {\n                sidebar.classList.add('active');\n                mainContent.classList.add('sidebar-open');\n            } else {\n                sidebar.classList.remove('active');\n                mainContent.classList.remove('sidebar-open');\n            }\n        });\n    }\n\n    toggleSidebar() {\n        const sidebar = document.getElementById('sidebar');\n        const mainContent = document.querySelector('.main-content');\n        \n        if (sidebar && mainContent) {\n            sidebar.classList.toggle('active');\n            mainContent.classList.toggle('sidebar-open');\n        }\n    }\n\n    // Feather Icons\n    initializeFeatherIcons() {\n        if (typeof feather !== 'undefined') {\n            feather.replace();\n            \n            // Re-initialize icons when content changes\n            const observer = new MutationObserver(() => {\n                feather.replace();\n            });\n            \n            observer.observe(document.body, {\n                childList: true,\n                subtree: true\n            });\n        }\n    }\n\n    // Form Validations\n    setupFormValidations() {\n        const forms = document.querySelectorAll('.needs-validation');\n        forms.forEach(form => {\n            form.addEventListener('submit', (e) => {\n                if (!form.checkValidity()) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.showFormErrors(form);\n                }\n                form.classList.add('was-validated');\n            });\n        });\n    }\n\n    validateForm(event) {\n        const form = event.target;\n        \n        // Custom validations\n        const passwordInputs = form.querySelectorAll('input[type=\"password\"]');\n        if (passwordInputs.length === 2) {\n            const [password, confirmPassword] = passwordInputs;\n            if (password.value !== confirmPassword.value) {\n                confirmPassword.setCustomValidity('Passwords do not match');\n            } else {\n                confirmPassword.setCustomValidity('');\n            }\n        }\n\n        // Email validation\n        const emailInputs = form.querySelectorAll('input[type=\"email\"]');\n        emailInputs.forEach(input => {\n            if (input.value && !this.isValidEmail(input.value)) {\n                input.setCustomValidity('Please enter a valid email address');\n            } else {\n                input.setCustomValidity('');\n            }\n        });\n\n        // Stock symbol validation\n        const symbolInputs = form.querySelectorAll('input[data-validate=\"symbol\"]');\n        symbolInputs.forEach(input => {\n            if (input.value && !this.isValidStockSymbol(input.value)) {\n                input.setCustomValidity('Please enter a valid stock symbol');\n            } else {\n                input.setCustomValidity('');\n            }\n        });\n    }\n\n    showFormErrors(form) {\n        const firstInvalid = form.querySelector(':invalid');\n        if (firstInvalid) {\n            firstInvalid.focus();\n            const errorMessage = firstInvalid.validationMessage || 'Please check this field';\n            this.showAlert('danger', errorMessage);\n        }\n    }\n\n    // Real-time Updates\n    handlePriceUpdate(data) {\n        // Update watchlist prices\n        Object.keys(data).forEach(symbol => {\n            const priceElements = document.querySelectorAll(`[data-symbol=\"${symbol}\"]`);\n            priceElements.forEach(element => {\n                this.updatePriceDisplay(element, data[symbol]);\n            });\n        });\n\n        // Update charts if visible\n        this.updateVisibleCharts(data);\n    }\n\n    updatePriceDisplay(element, priceData) {\n        const { price, change_percent } = priceData;\n        const changeClass = change_percent >= 0 ? 'text-success' : 'text-danger';\n        const changeSign = change_percent >= 0 ? '+' : '';\n        \n        if (element.dataset.displayType === 'price-only') {\n            element.textContent = `$${price.toFixed(2)}`;\n        } else {\n            element.innerHTML = `\n                <span class=\"price\">$${price.toFixed(2)}</span>\n                <small class=\"${changeClass}\">${changeSign}${change_percent.toFixed(2)}%</small>\n            `;\n        }\n        \n        element.classList.remove('text-success', 'text-danger');\n        element.classList.add(changeClass);\n    }\n\n    handleTradeUpdate(data) {\n        // Update portfolio values\n        this.updatePortfolioDisplay(data);\n        \n        // Show notification\n        const message = `Trade executed: ${data.side} ${data.quantity} ${data.symbol} at $${data.price}`;\n        this.showAlert('success', message);\n        \n        // Update trade history if visible\n        this.updateTradeHistory(data);\n    }\n\n    // Utility Functions\n    showAlert(type, message, duration = 3000) {\n        const alertDiv = document.createElement('div');\n        alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;\n        alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';\n        alertDiv.innerHTML = `\n            ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n        \n        document.body.appendChild(alertDiv);\n        \n        // Auto remove after duration\n        setTimeout(() => {\n            if (alertDiv.parentNode) {\n                alertDiv.remove();\n            }\n        }, duration);\n    }\n\n    updateConnectionStatus(connected) {\n        const statusElements = document.querySelectorAll('.connection-status');\n        statusElements.forEach(element => {\n            element.className = `connection-status badge ${connected ? 'bg-success' : 'bg-danger'}`;\n            element.textContent = connected ? 'Connected' : 'Disconnected';\n        });\n    }\n\n    copyToClipboard(text) {\n        if (navigator.clipboard && window.isSecureContext) {\n            navigator.clipboard.writeText(text).then(() => {\n                this.showAlert('success', 'Copied to clipboard!', 1500);\n            });\n        } else {\n            // Fallback for older browsers\n            const textArea = document.createElement('textarea');\n            textArea.value = text;\n            textArea.style.position = 'fixed';\n            textArea.style.left = '-999999px';\n            textArea.style.top = '-999999px';\n            document.body.appendChild(textArea);\n            textArea.focus();\n            textArea.select();\n            \n            try {\n                document.execCommand('copy');\n                this.showAlert('success', 'Copied to clipboard!', 1500);\n            } catch (err) {\n                this.showAlert('danger', 'Failed to copy to clipboard');\n            }\n            \n            textArea.remove();\n        }\n    }\n\n    formatCurrencyInput(input) {\n        const value = parseFloat(input.value);\n        if (!isNaN(value)) {\n            input.value = value.toFixed(2);\n        }\n    }\n\n    formatNumber(num) {\n        if (num >= 1e12) return (num / 1e12).toFixed(2) + 'T';\n        if (num >= 1e9) return (num / 1e9).toFixed(2) + 'B';\n        if (num >= 1e6) return (num / 1e6).toFixed(2) + 'M';\n        if (num >= 1e3) return (num / 1e3).toFixed(2) + 'K';\n        return num.toLocaleString();\n    }\n\n    formatCurrency(amount) {\n        return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD'\n        }).format(amount);\n    }\n\n    isValidEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    isValidStockSymbol(symbol) {\n        const symbolRegex = /^[A-Z]{1,5}(\\.[A-Z]{1,3})?$/;\n        return symbolRegex.test(symbol.toUpperCase());\n    }\n\n    // Chart Management\n    updateVisibleCharts(data) {\n        this.charts.forEach((chart, chartId) => {\n            if (chart && typeof chart.update === 'function') {\n                // Update chart data if the symbol matches\n                const symbol = chart.config?.data?.datasets?.[0]?.symbol;\n                if (symbol && data[symbol]) {\n                    this.updateChartData(chart, data[symbol]);\n                }\n            }\n        });\n    }\n\n    updateChartData(chart, priceData) {\n        const now = new Date();\n        const dataset = chart.data.datasets[0];\n        \n        // Add new data point\n        dataset.data.push({\n            x: now,\n            y: priceData.price\n        });\n        \n        // Keep only last 50 points\n        if (dataset.data.length > 50) {\n            dataset.data.shift();\n        }\n        \n        chart.update('none');\n    }\n\n    // Tab Management\n    switchTab(targetId) {\n        // Hide all tab panes\n        document.querySelectorAll('.tab-pane').forEach(pane => {\n            pane.classList.remove('active', 'show');\n        });\n        \n        // Remove active class from all tab buttons\n        document.querySelectorAll('.nav-link').forEach(link => {\n            link.classList.remove('active');\n        });\n        \n        // Show target tab pane\n        const targetPane = document.getElementById(targetId);\n        if (targetPane) {\n            targetPane.classList.add('active', 'show');\n        }\n        \n        // Add active class to clicked button\n        const activeButton = document.querySelector(`[data-tab-target=\"${targetId}\"]`);\n        if (activeButton) {\n            activeButton.classList.add('active');\n        }\n    }\n\n    // Auto-refresh Management\n    toggleAutoRefresh(enabled) {\n        if (enabled) {\n            this.priceUpdateInterval = setInterval(() => {\n                this.refreshPrices();\n            }, 30000); // Refresh every 30 seconds\n        } else {\n            if (this.priceUpdateInterval) {\n                clearInterval(this.priceUpdateInterval);\n                this.priceUpdateInterval = null;\n            }\n        }\n    }\n\n    async refreshPrices() {\n        const symbolElements = document.querySelectorAll('[data-symbol]');\n        const symbols = Array.from(new Set(Array.from(symbolElements).map(el => el.dataset.symbol)));\n        \n        for (const symbol of symbols) {\n            try {\n                const response = await fetch(`/api/stock-data/${symbol}`);\n                const data = await response.json();\n                \n                if (response.ok) {\n                    const elements = document.querySelectorAll(`[data-symbol=\"${symbol}\"]`);\n                    elements.forEach(element => {\n                        this.updatePriceDisplay(element, data);\n                    });\n                }\n            } catch (error) {\n                console.error(`Failed to fetch price for ${symbol}:`, error);\n            }\n        }\n    }\n\n    // Search functionality\n    handleSearch(query, searchType) {\n        if (!query) return;\n        \n        switch (searchType) {\n            case 'stock':\n                this.searchStocks(query);\n                break;\n            case 'news':\n                this.searchNews(query);\n                break;\n            default:\n                console.log(`Unknown search type: ${searchType}`);\n        }\n    }\n\n    async searchStocks(query) {\n        try {\n            const response = await fetch(`/api/search-stocks?q=${encodeURIComponent(query)}`);\n            const results = await response.json();\n            \n            if (response.ok) {\n                this.displaySearchResults('stock', results);\n            }\n        } catch (error) {\n            console.error('Stock search failed:', error);\n        }\n    }\n\n    displaySearchResults(type, results) {\n        const resultsContainer = document.querySelector(`[data-search-results=\"${type}\"]`);\n        if (!resultsContainer) return;\n        \n        resultsContainer.innerHTML = '';\n        \n        results.forEach(result => {\n            const resultElement = document.createElement('div');\n            resultElement.className = 'search-result-item';\n            resultElement.innerHTML = this.formatSearchResult(type, result);\n            resultsContainer.appendChild(resultElement);\n        });\n        \n        resultsContainer.style.display = results.length > 0 ? 'block' : 'none';\n    }\n\n    formatSearchResult(type, result) {\n        switch (type) {\n            case 'stock':\n                return `\n                    <div class=\"d-flex justify-content-between align-items-center p-2 border-bottom\">\n                        <div>\n                            <strong>${result.symbol}</strong>\n                            <small class=\"text-muted d-block\">${result.name}</small>\n                        </div>\n                        <div class=\"text-end\">\n                            <span class=\"fw-bold\">$${result.price}</span>\n                            <small class=\"d-block ${result.change >= 0 ? 'text-success' : 'text-danger'}\">\n                                ${result.change >= 0 ? '+' : ''}${result.change}%\n                            </small>\n                        </div>\n                    </div>\n                `;\n            default:\n                return '<div>Unknown result type</div>';\n        }\n    }\n\n    // Portfolio updates\n    updatePortfolioDisplay(data) {\n        const portfolioElements = document.querySelectorAll('[data-portfolio]');\n        portfolioElements.forEach(element => {\n            const field = element.dataset.portfolio;\n            if (data[field] !== undefined) {\n                if (field.includes('value') || field.includes('balance')) {\n                    element.textContent = this.formatCurrency(data[field]);\n                } else {\n                    element.textContent = data[field];\n                }\n            }\n        });\n    }\n\n    updateTradeHistory(tradeData) {\n        const historyContainer = document.querySelector('#tradeHistory tbody');\n        if (!historyContainer) return;\n        \n        const row = document.createElement('tr');\n        row.innerHTML = `\n            <td>${new Date(tradeData.executed_at).toLocaleDateString()}</td>\n            <td><strong>${tradeData.symbol}</strong></td>\n            <td><span class=\"badge bg-${tradeData.side === 'BUY' ? 'success' : 'danger'}\">${tradeData.side}</span></td>\n            <td>${tradeData.quantity}</td>\n            <td>$${tradeData.price.toFixed(2)}</td>\n            <td>$${tradeData.total_amount.toFixed(2)}</td>\n            <td><span class=\"badge bg-info\">${tradeData.status}</span></td>\n        `;\n        \n        historyContainer.insertBefore(row, historyContainer.firstChild);\n        \n        // Keep only last 20 rows\n        const rows = historyContainer.querySelectorAll('tr');\n        if (rows.length > 20) {\n            rows[rows.length - 1].remove();\n        }\n    }\n\n    // Performance monitoring\n    logPerformance(action, startTime) {\n        const endTime = performance.now();\n        const duration = endTime - startTime;\n        console.log(`${action} took ${duration.toFixed(2)} milliseconds`);\n    }\n\n    // Error handling\n    handleError(error, context = '') {\n        console.error(`Error in ${context}:`, error);\n        this.showAlert('danger', `An error occurred${context ? ` in ${context}` : ''}. Please try again.`);\n    }\n\n    // Cleanup\n    destroy() {\n        if (this.socket) {\n            this.socket.disconnect();\n        }\n        \n        if (this.priceUpdateInterval) {\n            clearInterval(this.priceUpdateInterval);\n        }\n        \n        this.charts.forEach(chart => {\n            if (chart && typeof chart.destroy === 'function') {\n                chart.destroy();\n            }\n        });\n        \n        this.charts.clear();\n    }\n}\n\n// Global utility functions\nwindow.CashOnDay = {\n    // Password toggle function (used in templates)\n    togglePassword: function(fieldId) {\n        const field = document.getElementById(fieldId);\n        const eye = document.getElementById(fieldId + '-eye');\n        \n        if (field && eye) {\n            if (field.type === 'password') {\n                field.type = 'text';\n                eye.setAttribute('data-feather', 'eye-off');\n            } else {\n                field.type = 'password';\n                eye.setAttribute('data-feather', 'eye');\n            }\n            \n            if (typeof feather !== 'undefined') {\n                feather.replace();\n            }\n        }\n    },\n\n    // Format number for display\n    formatNumber: function(num) {\n        if (typeof num !== 'number') return num;\n        if (num >= 1e12) return (num / 1e12).toFixed(2) + 'T';\n        if (num >= 1e9) return (num / 1e9).toFixed(2) + 'B';\n        if (num >= 1e6) return (num / 1e6).toFixed(2) + 'M';\n        if (num >= 1e3) return (num / 1e3).toFixed(2) + 'K';\n        return num.toLocaleString();\n    },\n\n    // Show confirmation dialog\n    confirm: function(message, callback) {\n        if (confirm(message)) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n        }\n    },\n\n    // Debounce function\n    debounce: function(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout);\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n};\n\n// Initialize the application when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    window.cashOnDayApp = new CashOnDayApp();\n    \n    // Make globally available for backward compatibility\n    window.toggleSidebar = () => window.cashOnDayApp.toggleSidebar();\n    window.togglePassword = CashOnDay.togglePassword;\n});\n\n// Handle page unload\nwindow.addEventListener('beforeunload', function() {\n    if (window.cashOnDayApp) {\n        window.cashOnDayApp.destroy();\n    }\n});\n\n// Export for module systems\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = CashOnDayApp;\n}\n","size_bytes":23976}},"version":1}